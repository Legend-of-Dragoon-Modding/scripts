entrypoint :ENTRYPOINT_0
data 0x10c
data 0xf00ff2d
data 0x49
data 0x0
data 0x930238
data 0x2000000
data 0x2000008
data 0x20242
data 0x2000008
data 0x900fffc
data 0x49
data 0x0
data 0x930238
data 0x200001c
data 0x2000008
data 0x20242
data 0x2000008
data 0x900fffc
data 0x49
data 0x60341
data 0x1000000
data 0x2
data 0x3071c00
data 0x9000030
data 0x60341
data 0x1000000
data 0x40
data 0x3071c00
data 0x9000039
data 0xa90338
data 0x200001c
data 0x1000000
data 0x5
data 0x2000008
data 0x60341
data 0x1000000
data 0x10
data 0x2000008
data 0x900002f
data 0xb10338
data 0x200001c
data 0x2
data 0x2000008
data 0x50242
data 0x2000008
data 0x9000026
data 0xb10338
data 0x200001c
data 0x6
data 0x2000009
data 0x221
data 0x4
data 0x2000009
data 0x50341
data 0x2000009
data 0x2000008
data 0x9000038
data 0xa90338
data 0x200001c
data 0x1000000
data 0x5
data 0x2000008
data 0x60341
data 0x1000000
data 0x40
data 0x2000008
data 0x9000021
data 0x8f0238
data 0x200001c
data 0x2000008
data 0x20341
data 0x0
data 0x2000008
data 0x9000034
data 0x1420238
data 0x200001c
data 0x0
data 0x920238
data 0x200001c
data 0x1
data 0x49
data 0x8f0238
data 0x200001c
data 0x2000008
data 0x20341
data 0xe
data 0x2000008
data 0x9000026
data 0x1420238
data 0x200001c
data 0xe
data 0x920238
data 0x200001c
data 0x0
data 0x49
data 0x8f0238
data 0x200001c
data 0x2000008
data 0x20341
data 0xa
data 0x2000008
data 0x9000018
data 0x1420238
data 0x200001c
data 0xa
data 0x920238
data 0x200001c
data 0x1
data 0x49
data 0x8f0238
data 0x200001c
data 0x2000008
data 0x20341
data 0xb
data 0x2000008
data 0x900000a
data 0x1420238
data 0x200001c
data 0xb
data 0x920238
data 0x200001c
data 0x1
data 0x49
data 0x1730338
data 0x200001c
data 0x200000a
data 0x0
data 0x208
data 0x2000008
data 0x10050a80
data 0x208
data 0x5
data 0x10000a80
data 0xa80338
data 0x200001e
data 0x2000008
data 0x25
data 0x1ed0138
data 0x200001e
data 0x208
data 0x2000008
data 0xf00772d
data 0xa90338
data 0x200001e
data 0x48
data 0x2000009
data 0x60341
data 0x80
data 0x2000009
data 0x900000a
data 0x1e00338
data 0x200001e
data 0x200001c
data 0x2000009
data 0x140
data 0x9000006
data 0x1fb0338
data 0x200001e
data 0x200001c
data 0x2000009
data 0x20242
data 0x2000009
data 0x900001b
data 0x148
data 0x900001c
data 0x208
data 0x2000009
data 0xf00772d
data 0x20242
data 0x2000008
data 0x900000f
data 0xa90338
data 0x200001e
data 0x5
data 0x2000009
data 0x70341
data 0x1000000
data 0x8
data 0x2000009
data 0x9000008
data 0x216
data 0x1
data 0x2000008
data 0x208
data 0xf00772d
data 0x2000009
data 0x49
data 0x208
data 0xffffffff
data 0x2000008
data 0x49
data 0xa90338
data 0x200001e
data 0x48
data 0x2000008
data 0x60341
data 0x80
data 0x2000008
data 0x900000a
data 0x1e10438
data 0x200001e
data 0x200001c
data 0x2000008
data 0x200000a
data 0x49
data 0x1ec0538
data 0x200001e
data 0x200001c
data 0xf00772d
data 0x2000008
data 0x200000a
data 0x49

; SUBROUTINE
LABEL_0:
call Battle::scriptGetBentSlot, stor[28], stor[10], 0x0 ; bentIndex, charOrBentSlot, mode
mov stor[8], var[128 + stor[10]][5] ; source, dest
mov 0x3, var[128 + stor[10]][0] ; source, dest
call Battle::scriptSetBentStat, stor[30], reg[0], ITEM_ID ; bentIndex, value, statIndex
mov stor[8], var[45][119] ; source, dest
call Battle::scriptSetTempItemMagicStats, stor[30] ; bentIndex
call Battle::scriptCheckItemHit, stor[30], stor[28], stor[9] ; attackerIndex, defenderIndex, hit
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_2] ; operand, left, right, addr
call Battle::scriptItemMagicAttack, stor[30], stor[28], stor[8], stor[8], stor[10] ; attackerIndex, defenderIndex, unused, damage, specialEffects
mov stor[10], var[45][119] ; source, dest
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_1] ; operand, left, right, addr
call Battle::scriptGetBentStat, stor[30], STATUS, stor[10] ; bentIndex, statIndex, value
jmp_cmp !&, 0x8, stor[10], inl[:LABEL_1] ; operand, left, right, addr
shr 0x1, stor[8] ; shift, val
LABEL_1:
mov var[45][119], stor[10] ; source, dest
return
LABEL_2:
mov 0xffffffff, stor[8] ; source, dest
mov 0xfffffffe, stor[10] ; source, dest
return
data 0xa80338
data 0x200001e
data 0x2000008
data 0x25
data 0x1ed0138
data 0x200001e
data 0x208
data 0x2000008
data 0xf00772d
data 0x1fb0338
data 0x200001e
data 0x200001c
data 0x2000009
data 0x20242
data 0x2000009
data 0x9000021
data 0x1730338
data 0x200001c
data 0x200000a
data 0x0
data 0x208
data 0x2000008
data 0x10050a80
data 0x208
data 0x2
data 0x10000a80
data 0x208
data 0x200001e
data 0x10030a80
data 0x208
data 0x2000008
data 0x10020a80
data 0xa90338
data 0x200001e
data 0x50
data 0x2000008
data 0x208
data 0x2000008
data 0x10010a80
data 0x1ec0538
data 0x200001e
data 0x200001c
data 0xf00772d
data 0x2000008
data 0x200000a
data 0x49
data 0x208
data 0xffffffff
data 0x2000008
data 0x49
data 0x1730338
data 0x2000000
data 0x2000008
data 0x0
data 0x208
data 0x1
data 0x2000009
data 0x215
data 0x2000008
data 0x2000009
data 0x211
data 0x2000009
data 0xf00f62d
data 0x49
data 0x1730338
data 0x2000000
data 0x2000008
data 0x0
data 0x208
data 0x1
data 0x2000009
data 0x215
data 0x2000008
data 0x2000009
data 0x11d
data 0x2000009
data 0x11c
data 0x2000009
data 0x210
data 0x2000009
data 0xf00f62d
data 0x49
data 0x10c
data 0x2000008
data 0x70341
data 0x1000000
data 0x200000
data 0x3071c00
data 0x9000007
data 0x11b
data 0x2000008
data 0x49
data 0x357
data 0x200001c
data 0xa
data 0x2000008
data 0x0
data 0x60341
data 0x1000000
data 0x200000
data 0x3071c00
data 0x900ffff
data 0x0
data 0x0
data 0x49
data 0x60341
data 0x1000000
data 0x40
data 0x3071c00
data 0x9000029
data 0xb10338
data 0x200001c
data 0x2
data 0x200000a
data 0x218
data 0x2000008
data 0x200000a
data 0xb10338
data 0x200001c
data 0x6
data 0x2000009
data 0x50341
data 0x2000009
data 0x200000a
data 0x9000011
data 0xb10338
data 0x200001c
data 0x2
data 0x2000008
data 0x208
data 0x2000009
data 0x200000a
data 0x219
data 0x2000008
data 0x2000009
data 0x208
data 0x2000009
data 0x2000008
data 0x1ee0338
data 0x200001c
data 0x2000008
data 0x7
data 0xb20338
data 0x200001c
data 0x200000a
data 0x2
data 0x49
data 0x60341
data 0x1000000
data 0x40
data 0x3071c00
data 0x9000029
data 0xa90338
data 0x200001c
data 0x4
data 0x200000a
data 0x218
data 0x2000008
data 0x200000a
data 0xa90338
data 0x200001c
data 0x7
data 0x2000009
data 0x50341
data 0x2000009
data 0x200000a
data 0x9000011
data 0xa90338
data 0x200001c
data 0x4
data 0x2000008
data 0x208
data 0x2000009
data 0x200000a
data 0x219
data 0x2000008
data 0x2000009
data 0x208
data 0x2000009
data 0x2000008
data 0x1ee0338
data 0x200001c
data 0x2000008
data 0xc
data 0xb20338
data 0x200001c
data 0x200000a
data 0x4
data 0x49
data 0x60341
data 0x1000000
data 0x40
data 0x3071c00
data 0x900001f
data 0x1e70338
data 0x200001c
data 0x2000008
data 0x2000009
data 0x1ee0338
data 0x200001c
data 0x2000008
data 0xd
data 0x70341
data 0x1000000
data 0x2
data 0x3071c00
data 0x9000012
data 0x221
data 0x64
data 0x2000008
data 0x1730338
data 0x200001c
data 0x2000009
data 0x1
data 0x218
data 0x45
data 0x2000009
data 0x218
data 0x2000008
data 0x700092d
data 0x49
data 0x0
data 0x208
data 0x5000031
data 0x2000009
data 0x10c
data 0x200000a
data 0x10c
data 0x200000b
data 0x10c
data 0x200000c
data 0x10c
data 0x2000008
data 0x208
data 0x7000830
data 0x200000c
data 0x208
data 0x3070c00
data 0x200000a
data 0x210
data 0x1000000
data 0x200000
data 0x200000a
data 0x211
data 0x200000a
data 0x200000b
data 0x11b
data 0x2000008
data 0x40341
data 0x2000009
data 0x2000008
data 0x900fff1
data 0x30242
data 0x200000b
data 0x900ffe1
data 0x0
data 0x0
data 0x49
data 0x0
data 0x1f40138
data 0x2000008
data 0x30242
data 0x2000008
data 0x900fffd
data 0x49
data 0x1730338
data 0x200001c
data 0x2000009
data 0x0
data 0x218
data 0x81
data 0x2000009
data 0x10c
data 0x700092d
data 0xa90338
data 0x200001c
data 0x1000000
data 0x5
data 0x2000008
data 0x210
data 0x1000000
data 0xffffff00
data 0x2000008
data 0xa80338
data 0x200001c
data 0x2000008
data 0x1000000
data 0x5
data 0x49
data 0x40242
data 0xf00402d
data 0x900006e
data 0xa80338
data 0x200001e
data 0xf00402d
data 0x29
data 0x1e10438
data 0x200001e
data 0x200001c
data 0x2000009
data 0x200000a
data 0x208
data 0x200000a
data 0xf00f12d
data 0xa90338
data 0x200001e
data 0x5
data 0x200000b
data 0x70341
data 0x1000000
data 0x8
data 0x200000b
data 0x900000b
data 0x20242
data 0x2000009
data 0x9000006
data 0x216
data 0x1
data 0x2000009
data 0x1730338
data 0x200001e
data 0x200000a
data 0x0
data 0x218
data 0xbd
data 0x200000a
data 0x208
data 0x7000a2d
data 0x200000a
data 0x70341
data 0x2
data 0x200000a
data 0x900000b
data 0x60341
data 0x4
data 0x200000a
data 0x9000007
data 0x216
data 0x1
data 0x2000009
data 0x50242
data 0x2000009
data 0x9000033
data 0x1730338
data 0x200001e
data 0x200000a
data 0x0
data 0x218
data 0xbd
data 0x200000a
data 0x70341
data 0x1
data 0x7000a2d
data 0x9000029
data 0xb10338
data 0x200001e
data 0x2
data 0x200000a
data 0xb10338
data 0x200001e
data 0x6
data 0x200000b
data 0x221
data 0x2
data 0x200000b
data 0x10341
data 0x200000b
data 0x200000a
data 0x900001a
data 0xb10338
data 0x200001e
data 0x6
data 0x200000b
data 0x221
data 0x4
data 0x200000b
data 0x50341
data 0x200000b
data 0x200000a
data 0x900000c
data 0x220
data 0x3
data 0x2000009
data 0x216
data 0x1
data 0x2000009
data 0x140
data 0x9000005
data 0x220
data 0x2
data 0x2000009
data 0x50341
data 0x3b9ac9ff
data 0x2000009
data 0x9000007
data 0x208
data 0x3b9ac9ff
data 0x2000009
data 0x49
data 0x208
data 0xffffffff
data 0x2000009
data 0x208
data 0xffffffff
data 0x200000a
data 0x49
data 0x357
data 0x200001c
data 0x11
data 0x0
data 0x148
data 0x900ff43
data 0x49
data 0x10c
data 0x200000d
data 0x208
data 0x7000d32
data 0x200001c
data 0x70341
data 0x1000000
data 0x2
data 0x3071c00
data 0x900000b
data 0x357
data 0x200001c
data 0x11
data 0x0
data 0x148
data 0x900ff32
data 0x11b
data 0x200000d
data 0x208
data 0xa
data 0x200000e
data 0x40341
data 0x5000033
data 0x200000d
data 0x900ffed
data 0x49
data 0x30a
data 0x2
data 0x2000008
data 0x900002d
data 0x148
data 0x9000007
data 0x30a
data 0x2
data 0x9000027
data 0x2000008
data 0x49
data 0xa90338
data 0x2000008
data 0x5
data 0x2000009
data 0x70341
data 0x1000000
data 0x4000
data 0x2000009
data 0x900000a
data 0x208
data 0x9
data 0x2000009
data 0x140
data 0x9000005
data 0xa70238
data 0x2000008
data 0x2000009
data 0x60341
data 0x1000000
data 0x2
data 0x3070800
data 0x900000d
data 0x20c0238
data 0x2000008
data 0xa09000e
data 0x2050338
data 0x2000008
data 0xa09001f
data 0xa09001f
data 0x49
data 0x20c0238
data 0x2000008
data 0xa090010
data 0x49
data 0x0
data 0x0
data 0x8
data 0x9
data 0xd
data 0xb
data 0xa
data 0x9
data 0xc
data 0x8
data 0xc
data 0x8
data 0x8
data 0x9
data 0xb
data 0xb
data 0x8
data 0x9
data 0xc
data 0x8
data 0xb
data 0x7
data 0x1800
data 0x1800
data 0x1000
data 0xe00
data 0x1600
data 0x1300
data 0xe00
data 0x2000
data 0x1300
data 0x1500
data 0x208
data 0x8
data 0x2000008
data 0x10341
data 0x8
data 0x2000008
data 0x9000184
data 0x40242
data 0x2000008
data 0x900fff9
data 0x2580138
data 0x2000012
data 0x208
data 0x200001e
data 0x31e1200
data 0x208
data 0x200001c
data 0x31c1200
data 0x208
data 0x2000008
data 0x31f1200
data 0x26a0238
data 0x2000012
data 0x9000004
data 0x49
data 0x148
data 0x900010f
data 0x2590238
data 0x2000012
data 0xfff25
data 0x2210538
data 0x2000012
data 0xffffffff
data 0x2000014
data 0x2000015
data 0x2000016
data 0x2250538
data 0x2000012
data 0xffffffff
data 0x500
data 0x500
data 0x500
data 0x2370838
data 0x2000012
data 0x2000012
data 0x0
data 0xfffffe00
data 0xfffffe00
data 0x0
data 0x0
data 0x0
data 0x2550638
data 0x2000012
data 0xffffffff
data 0xf
data 0x200000a
data 0x200000b
data 0x200000c
data 0x2570538
data 0x2000012
data 0xffffffff
data 0x0
data 0x2000
data 0x0
data 0x2270538
data 0x2000012
data 0xffffffff
data 0xa1f012c
data 0xa1f0135
data 0xa1f013e
data 0x24c0238
data 0x2000012
data 0xf
data 0x2ea0938
data 0x2000013
data 0x2000012
data 0xfff3e
data 0x20
data 0x40
data 0xc
data 0x200
data 0x0
data 0x37
data 0x2210538
data 0x2000013
data 0xffffffff
data 0x2000014
data 0x2000015
data 0x2000016
data 0x2250538
data 0x2000013
data 0xffffffff
data 0x400
data 0x400
data 0x400
data 0x2550638
data 0x2000013
data 0xffffffff
data 0xf
data 0x200000a
data 0x200000b
data 0x200000c
data 0x2570538
data 0x2000013
data 0xffffffff
data 0x0
data 0x2000
data 0x0
data 0x24c0238
data 0x2000013
data 0x20
data 0x2590238
data 0x2000013
data 0xfff17
data 0x2630338
data 0x2000013
data 0x2000012
data 0xffffffff
data 0x2210538
data 0x2000013
data 0xffffffff
data 0x0
data 0xfffffc00
data 0x0
data 0x2250538
data 0x2000013
data 0xffffffff
data 0x200
data 0x200
data 0x200
data 0x24c0238
data 0x2000013
data 0xf
data 0x2590238
data 0x2000013
data 0xfff18
data 0x2630338
data 0x2000013
data 0x2000012
data 0xffffffff
data 0x2210538
data 0x2000013
data 0xffffffff
data 0x0
data 0x400
data 0x0
data 0x2250538
data 0x2000013
data 0xffffffff
data 0x200
data 0x200
data 0x200
data 0x24c0238
data 0x2000013
data 0xf
data 0x2590238
data 0x2000013
data 0xfff17
data 0x2630338
data 0x2000013
data 0x2000012
data 0xffffffff
data 0x2210538
data 0x2000013
data 0xffffffff
data 0x0
data 0x0
data 0xfffffc00
data 0x2250538
data 0x2000013
data 0xffffffff
data 0x200
data 0x200
data 0x200
data 0x24c0238
data 0x2000013
data 0xf
data 0x2590238
data 0x2000013
data 0xfff18
data 0x2630338
data 0x2000013
data 0x2000012
data 0xffffffff
data 0x2210538
data 0x2000013
data 0xffffffff
data 0x0
data 0x0
data 0x400
data 0x2250538
data 0x2000013
data 0xffffffff
data 0x200
data 0x200
data 0x200
data 0x24c0238
data 0x2000013
data 0xf
data 0x208
data 0xf
data 0x2000017
data 0x102
data 0x2000017
data 0x2ea0938
data 0x2000013
data 0x2000012
data 0xfff17
data 0x4
data 0x200
data 0x2
data 0x200
data 0xc7f00
data 0x27
data 0x2210538
data 0x2000013
data 0xffffffff
data 0x200000a
data 0x200000b
data 0x200000c
data 0x2250538
data 0x2000013
data 0xffffffff
data 0x200
data 0x200
data 0x200
data 0x24c0238
data 0x2000013
data 0x14
data 0x2ea0938
data 0x2000013
data 0x2000012
data 0xfff18
data 0x4
data 0x200
data 0x2
data 0x200
data 0xc7f00
data 0x27
data 0x2210538
data 0x2000013
data 0xffffffff
data 0x200000a
data 0x200000b
data 0x200000c
data 0x2250538
data 0x2000013
data 0xffffffff
data 0x200
data 0x200
data 0x200
data 0x24c0238
data 0x2000013
data 0x14
data 0x2ea0938
data 0x2000013
data 0x2000012
data 0xfff25
data 0x10
data 0x200
data 0x2
data 0x200
data 0x1000000
data 0x40c7f00
data 0x27
data 0x2210538
data 0x2000013
data 0xffffffff
data 0x200000a
data 0x200000b
data 0x200000c
data 0x2250538
data 0x2000013
data 0xffffffff
data 0x300
data 0x300
data 0x300
data 0x2270538
data 0x2000013
data 0xffffffff
data 0xa1f0057
data 0xa1f0060
data 0xa1f0069
data 0x2290338
data 0x2000013
data 0x0
data 0x1
data 0x24c0238
data 0x2000013
data 0x14
data 0x208
data 0x14
data 0x2000017
data 0x102
data 0x2000017
data 0x50
data 0x242
data 0x200001c
data 0x900003d
data 0x208
data 0x5000023
data 0x2000017
data 0x10c
data 0x2000008
data 0x10c
data 0x200000a
data 0x10c
data 0x200000b
data 0x10c
data 0x200000c
data 0x208
data 0x7000822
data 0x2000009
data 0x810438
data 0x2000009
data 0x2000014
data 0x2000015
data 0x2000016
data 0x218
data 0x2000014
data 0x200000a
data 0x218
data 0x2000015
data 0x200000b
data 0x218
data 0x2000016
data 0x200000c
data 0x11b
data 0x2000008
data 0x40341
data 0x2000017
data 0x2000008
data 0x900ffed
data 0x221
data 0x2000017
data 0x200000a
data 0x221
data 0x2000017
data 0x200000b
data 0x221
data 0x2000017
data 0x200000c
data 0x219
data 0x600
data 0x200000b
data 0x219
data 0x200
data 0x200000b
data 0x810438
data 0x200001e
data 0x2000014
data 0x2000015
data 0x2000016
data 0x219
data 0x400
data 0x2000015
data 0x49
data 0x810438
data 0x200001c
data 0x200000a
data 0x200000b
data 0x200000c
data 0x140
data 0x900ffef
data 0xff
data 0x51
data 0x55
data 0xd8
data 0xe7
data 0xe8
data 0x10
data 0x0
data 0xf5
data 0x20
data 0xa6
data 0xc8
data 0xd4
data 0xe7
data 0xe0
data 0x10
data 0x0
data 0xff
data 0x0
data 0xe8
data 0x83
data 0x88
data 0x78
data 0x88
data 0xd8
data 0x0
data 0xd7
data 0x49
data 0xa90338
data 0x200001c
data 0x40
data 0x2000018
data 0xa90338
data 0x200001c
data 0x41
data 0x2000019
data 0x220
data 0x64
data 0x2000018
data 0x220
data 0x64
data 0x2000019
data 0x11d
data 0x2000019
data 0x10c
data 0x200001a
data 0x810438
data 0x200001c
data 0x200000e
data 0x200000f
data 0x2000010
data 0x218
data 0x200000e
data 0x2000018
data 0x218
data 0x200000f
data 0x2000019
data 0x218
data 0x2000010
data 0x200001a
data 0x49
data 0x1730338
data 0x200001c
data 0x2000008
data 0x0
data 0x208
data 0x200001e
data 0x10040880
data 0x49
data 0x40242
data 0xf00e02d
data 0x9000016
data 0xa90338
data 0x2000000
data 0x5
data 0x2000008
data 0x70341
data 0x1000000
data 0x10
data 0x2000008
data 0x900000f
data 0x1730338
data 0x2000000
data 0x2000008
data 0x0
data 0x218
data 0x81
data 0x2000008
data 0x211
data 0xf00
data 0x700082d
data 0x49
data 0x148
data 0x900fd11
data 0x10c
data 0x2000009
data 0x208
data 0x7000922
data 0x200001c
data 0x1730338
data 0x200001c
data 0x2000008
data 0x0
data 0x70341
data 0x400
data 0x10070880
data 0x9000008
data 0x357
data 0x200001c
data 0x4
data 0x0
data 0x11b
data 0x2000009
data 0x10341
data 0x2000009
data 0x5000023
data 0x900ffef
data 0x148
data 0x900fcf8
data 0x49
data 0x0
data 0x60341
data 0x4
data 0xf00f52d
data 0x900ffff
data 0x49
data 0xa90338
data 0x200001c
data 0x8
data 0x2000008
data 0x210
data 0x80
data 0x2000008
data 0x49
data 0x3560238
data 0x0
data 0x2000008
data 0x20242
data 0x2000008
data 0x9000007
data 0x208
data 0xf00682d
data 0x2000008
data 0x49
data 0x208
data 0xffffffff
data 0x2000008
data 0x49
data 0x208
data 0x1
data 0x2000011
data 0x10c
data 0x2000014
data 0x140
data 0x9000009
data 0x208
data 0x1
data 0x2000011
data 0x10c
data 0x2000013
data 0x10c
data 0x2000014
data 0x20341
data 0x0
data 0x200000e
data 0x9000034
data 0x220
data 0x1000000
data 0xffffffff
data 0x2000011
data 0x20341
data 0x1
data 0x2000011
data 0x9000012
data 0x3400538
data 0x24
data 0x50
data 0x2a
data 0x1
data 0x80
data 0x3400538
data 0x23
data 0x4c
data 0x32
data 0x1
data 0x80
data 0x140
data 0x900000e
data 0x3400538
data 0x24
data 0x50
data 0x2e
data 0x1
data 0x80
data 0x3400538
data 0x21
data 0x4c
data 0x32
data 0x1
data 0x80
data 0x60341
data 0x1000000
data 0x20
data 0x5000004
data 0x9000011
data 0x10c
data 0x200000b
data 0x50242
data 0x2000014
data 0x9000005
data 0x11c
data 0x2000014
data 0x148
data 0x900001c
data 0x0
data 0x140
data 0x900ffcb
data 0x11b
data 0x2000009
data 0x11b
data 0x200000a
data 0x50242
data 0x2000014
data 0x9000008
data 0x208
data 0x0
data 0x200000b
data 0x140
data 0x9000008
data 0x208
data 0x1
data 0x200000b
data 0x208
data 0x2000013
data 0x2000014
data 0x218
data 0x200000c
data 0x2000008
data 0x140
data 0x900ffe1
data 0x208
data 0x2000008
data 0x2000019
data 0x208
data 0x2000019
data 0x2000018
data 0x223
data 0xa
data 0x2000018
data 0x219
data 0x2000018
data 0x2000019
data 0x218
data 0x3
data 0x2000018
data 0x3400538
data 0x2000018
data 0x78
data 0x32
data 0x1
data 0x80
data 0x208
data 0x2000019
data 0x2000018
data 0x223
data 0x64
data 0x2000018
data 0x219
data 0x2000018
data 0x2000019
data 0x221
data 0xa
data 0x2000018
data 0x218
data 0x3
data 0x2000018
data 0x3400538
data 0x2000018
data 0x70
data 0x32
data 0x1
data 0x80
data 0x208
data 0x2000019
data 0x2000018
data 0x223
data 0x3e8
data 0x2000018
data 0x221
data 0x64
data 0x2000018
data 0x218
data 0x3
data 0x2000018
data 0x3400538
data 0x2000018
data 0x68
data 0x32
data 0x1
data 0x80
data 0x3400538
data 0xd
data 0x80
data 0x32
data 0x1
data 0x80
data 0x3400538
data 0x20
data 0x68
data 0x36
data 0x1
data 0x80
data 0x3400538
data 0x1e
data 0x64
data 0x36
data 0x1
data 0x80
data 0x3400538
data 0x1c
data 0x68
data 0x32
data 0x1
data 0x80
data 0x3400538
data 0x18
data 0x64
data 0x32
data 0x1
data 0x80
data 0x3400538
data 0x1a
data 0x64
data 0x3e
data 0x1
data 0x80
data 0x3400538
data 0x1d
data 0x68
data 0x3e
data 0x1
data 0x80
data 0x3400538
data 0x20
data 0x70
data 0x36
data 0x1
data 0x80
data 0x3400538
data 0x1d
data 0x70
data 0x3e
data 0x1
data 0x80
data 0x3400538
data 0x1c
data 0x70
data 0x32
data 0x1
data 0x80
data 0x3400538
data 0x20
data 0x78
data 0x36
data 0x1
data 0x80
data 0x3400538
data 0x1d
data 0x78
data 0x3e
data 0x1
data 0x80
data 0x3400538
data 0x1c
data 0x78
data 0x32
data 0x1
data 0x80
data 0x3400538
data 0x20
data 0x80
data 0x36
data 0x1
data 0x80
data 0x3400538
data 0x1d
data 0x80
data 0x3e
data 0x1
data 0x80
data 0x3400538
data 0x1c
data 0x80
data 0x32
data 0x1
data 0x80
data 0x3400538
data 0x1f
data 0x8c
data 0x36
data 0x1
data 0x80
data 0x3400538
data 0x19
data 0x8c
data 0x32
data 0x1
data 0x80
data 0x3400538
data 0x1b
data 0x8c
data 0x3e
data 0x1
data 0x80
data 0x49

; SUBROUTINE
LABEL_3:
gosub inl[:LABEL_12] ; addr
mov var[35], stor[26] ; source, dest
decr stor[26] ; operand
LABEL_4:
mov var[34][stor[26]], stor[27] ; source, dest
jmp_cmp ==, stor[30], stor[27], inl[:LABEL_5] ; operand, left, right, addr
decr stor[26] ; operand
jmp_cmp <=, 0x0, stor[26], inl[:LABEL_4] ; operand, left, right, addr
mov 0x1, stor[8] ; source, dest
jmp inl[:LABEL_6] ; addr
LABEL_5:
mov 0x0, stor[8] ; source, dest
LABEL_6:
return

; SUBROUTINE
LABEL_7:
gosub inl[:LABEL_12] ; addr
jmp_cmp ==, 0xffffffff, stor[28], inl[:LABEL_9] ; operand, left, right, addr
jmp_cmp ==, 0xfffffffe, stor[28], inl[:LABEL_10] ; operand, left, right, addr
mov var[35], stor[26] ; source, dest
decr stor[26] ; operand
LABEL_8:
mov var[34][stor[26]], stor[27] ; source, dest
jmp_cmp ==, stor[28], stor[27], inl[:LABEL_10] ; operand, left, right, addr
decr stor[26] ; operand
jmp_cmp <=, 0x0, stor[26], inl[:LABEL_8] ; operand, left, right, addr
LABEL_9:
mov 0x1, stor[8] ; source, dest
jmp inl[:LABEL_11] ; addr
LABEL_10:
mov 0x0, stor[8] ; source, dest
LABEL_11:
return
data 0x148
data 0x900ffda
data 0x20242
data 0x2000008
data 0x900000b
data 0x231
data 0x5000035
data 0x200001b
data 0x208
data 0x7001b34
data 0x2000008
data 0x140
data 0x9000008
data 0x231
data 0x5000033
data 0x200001b
data 0x208
data 0x7001b32
data 0x2000008
data 0x49

; SUBROUTINE
LABEL_12:
call Battle::FUN_800e74ac, stor[30], stor[28] ; bentIndex, p1
return
data 0x208
data 0xf00ca2d
data 0x2000008
data 0x341
data 0x0
data 0x2000008
data 0x9000007
data 0x208
data 0x5
data 0x2000008
data 0x50341
data 0x9
data 0x2000008
data 0x9000007
data 0x208
data 0x5
data 0x2000008
data 0x49

; SUBROUTINE
LABEL_13:
mov var[45][147], stor[8] ; source, dest
jmp_cmp <=, 0x0, stor[8], inl[:LABEL_14] ; operand, left, right, addr
mov 0x64, stor[8] ; source, dest
LABEL_14:
jmp_cmp >=, 0x3e8, stor[8], inl[:LABEL_15] ; operand, left, right, addr
mov 0x64, stor[8] ; source, dest
LABEL_15:
return
data 0x208
data 0x2000008
data 0x200000a
data 0x148
data 0x900ff9b
data 0x20242
data 0x2000008
data 0x900000f
data 0xa90338
data 0x200001c
data 0x35
data 0x200001a
data 0x70341
data 0x1000000
data 0x1
data 0x200001a
data 0x9000008
data 0x208
data 0x64
data 0x200000d
data 0x208
data 0x200000a
data 0x2000008
data 0x148
data 0x900ffc1
data 0x148
data 0x90000a4
data 0x148
data 0x900fa14
data 0x220
data 0x200000d
data 0x2000008
data 0x221
data 0x64
data 0x2000008
data 0x50341
data 0x3b9ac9ff
data 0x2000008
data 0x9000007
data 0x208
data 0x3b9ac9ff
data 0x2000008
data 0x341
data 0x1000000
data 0xffffffff
data 0x2000008
data 0x9000009
data 0x208
data 0x1000000
data 0xffffffff
data 0x2000008
data 0x357
data 0x200001c
data 0x2
data 0x2000008
data 0x49

; SUBROUTINE
LABEL_16:
gosub inl[:LABEL_28] ; addr
mov stor[8], stor[27] ; source, dest
gosub inl[:LABEL_12] ; addr
jmp_cmp ==, 0xffffffff, stor[28], inl[:LABEL_21] ; operand, left, right, addr
mov var[51], stor[26] ; source, dest
decr stor[26] ; operand
LABEL_17:
mov var[50][stor[26]], stor[28] ; source, dest
jmp_cmp &, stor[stor[stor[0], 28], 7], 0x4000, inl[:LABEL_20] ; operand, left, right, addr
mov stor[27], stor[8] ; source, dest
gosub inl[:LABEL_0] ; addr
mul stor[13], stor[8] ; amount, operand
div 0x64, stor[8] ; amount, operand
jmp_cmp >=, 0x3b9ac9ff, stor[8], inl[:LABEL_18] ; operand, left, right, addr
mov 0x3b9ac9ff, stor[8] ; source, dest
LABEL_18:
jmp_cmp <=, 0xffffffff, stor[8], inl[:LABEL_19] ; operand, left, right, addr
mov 0xffffffff, stor[8] ; source, dest
LABEL_19:
fork_reenter stor[28], 0x2, stor[8] ; index, entrypoint, stor[32] value
LABEL_20:
decr stor[26] ; operand
jmp_cmp <=, 0x0, stor[26], inl[:LABEL_17] ; operand, left, right, addr
jmp inl[:LABEL_27] ; addr
LABEL_21:
mov var[53], stor[26] ; source, dest
decr stor[26] ; operand
LABEL_22:
mov var[52][stor[26]], stor[28] ; source, dest
jmp_cmp &, stor[stor[stor[0], 28], 7], 0x4000, inl[:LABEL_26] ; operand, left, right, addr
mov stor[27], stor[8] ; source, dest
gosub inl[:LABEL_0] ; addr
mov stor[13], stor[10] ; source, dest
call Battle::scriptGetBentStat, stor[28], MONSTER_DAMAGE_REDUCTION, stor[9] ; bentIndex, statIndex, value
jmp_cmp !&, 0x1, stor[9], inl[:LABEL_23] ; operand, left, right, addr
mov 0x64, stor[13] ; source, dest
LABEL_23:
mul stor[13], stor[8] ; amount, operand
mov stor[10], stor[13] ; source, dest
div 0x64, stor[8] ; amount, operand
jmp_cmp >=, 0x3b9ac9ff, stor[8], inl[:LABEL_24] ; operand, left, right, addr
mov 0x3b9ac9ff, stor[8] ; source, dest
LABEL_24:
jmp_cmp <=, 0xffffffff, stor[8], inl[:LABEL_25] ; operand, left, right, addr
mov 0xffffffff, stor[8] ; source, dest
LABEL_25:
fork_reenter stor[28], 0x2, stor[8] ; index, entrypoint, stor[32] value
LABEL_26:
decr stor[26] ; operand
jmp_cmp <=, 0x0, stor[26], inl[:LABEL_22] ; operand, left, right, addr
LABEL_27:
gosub inl[:LABEL_12] ; addr
return

; SUBROUTINE
LABEL_28:
sub 0xc0, stor[8] ; amount, operand
return
data 0x148
data 0x900fedd
data 0x20341
data 0x1
data 0x2000008
data 0x900000a
data 0x208
data 0x1000000
data 0xfffffd80
data 0x2000008
data 0x140
data 0x9000018
data 0xa90338
data 0x200001c
data 0x41
data 0x2000008
data 0x220
data 0x64
data 0x2000008
data 0x218
data 0x1000000
data 0xffffff00
data 0x2000008
data 0x11d
data 0x2000008
data 0x50341
data 0x1000000
data 0xfffffe00
data 0x2000008
data 0x9000009
data 0x208
data 0x1000000
data 0xfffffe00
data 0x2000008
data 0x49
data 0x148
data 0x900feba
data 0x20341
data 0x1
data 0x2000008
data 0x9000009
data 0x208
data 0x0
data 0x2000008
data 0x140
data 0x900000a
data 0xa90338
data 0x200001c
data 0x40
data 0x2000008
data 0x220
data 0x1000000
data 0xffffff9c
data 0x2000008
data 0x49

; SUBROUTINE
LABEL_29:
mov 0xfffffd80, stor[8] ; source, dest
jmp inl[:LABEL_31] ; addr

; SUBROUTINE
LABEL_30:
call Battle::scriptGetBentStat, stor[28], MIDDLE_OFFSET_Y, stor[8] ; bentIndex, statIndex, value
mul 0x64, stor[8] ; amount, operand
add 0xffffff00, stor[8] ; amount, operand
neg stor[8] ; operand
jmp_cmp >=, 0xfffffe00, stor[8], inl[:LABEL_31] ; operand, left, right, addr
mov 0xfffffe00, stor[8] ; source, dest
LABEL_31:
return
data 0x208
data 0x0
data 0x2000008
data 0x140
data 0x9000009
data 0xa90338
data 0x200001c
data 0x40
data 0x2000008
data 0x220
data 0x64
data 0x2000008
data 0x49

; SUBROUTINE
LABEL_32:
call Scus94491BpeSegment::scriptLoadMonsterAttackSounds, stor[8] ; monsterIndex
LABEL_33:
call Scus94491BpeSegment::scriptGetLoadedSoundFiles, stor[26] ; flags
yield
jmp_cmp &, 0x20, stor[26], inl[:LABEL_33] ; operand, left, right, addr
return

; SUBROUTINE
LABEL_34:
decr stor[8] ; operand
call Scus94491BpeSegment::scriptStopSound, 0xa, stor[8], 0x3 ; soundFileIndex, soundIndex, mode
incr stor[8] ; operand
while stor[8], inl[:LABEL_34] ; counter, addr
call Scus94491BpeSegment::scriptUnloadSoundFile, 0x6 ; soundType
return
data 0x34b0338
data 0x3160a00
data 0x0
data 0x2
data 0x24c0238
data 0x3160a00
data 0x5
data 0x148
data 0x9000042
data 0x208
data 0x60
data 0x500002c
data 0x148
data 0x900fe92
data 0x208
data 0x200001e
data 0x5000050
data 0x208
data 0x200001c
data 0x5000051
data 0x49
data 0x34b0338
data 0x3160a00
data 0x0
data 0x2
data 0x24c0238
data 0x3160a00
data 0x5
data 0x148
data 0x900002d
data 0x148
data 0x900fe46
data 0x20242
data 0x2000008
data 0x9000008
data 0x208
data 0x6a
data 0x500002c
data 0x140
data 0x9000005
data 0x208
data 0x60
data 0x500002c
data 0x148
data 0x900fe73
data 0x208
data 0x200001e
data 0x5000050
data 0x208
data 0x200001c
data 0x5000051
data 0x49
data 0x11b
data 0x5000059
data 0x49

; SUBROUTINE
LABEL_35:
call SEffe::scriptAllocateScreenDistortionEffect, stor[22], 0x0, 0x2 ; effectIndex, angleStep, type
call SEffe::scriptAddLifespanAttachment, stor[22], 0x5 ; effectIndex, ticks
yield
mov 0xe3, var[44] ; source, dest
yield
yield
gosub inl[:LABEL_42] ; addr
yield
yield
return

; SUBROUTINE
LABEL_36:
gosub inl[:LABEL_3] ; addr
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_39] ; operand, left, right, addr
mov var[53], stor[26] ; source, dest
decr stor[26] ; operand
LABEL_37:
mov var[52][stor[26]], stor[27] ; source, dest
call Battle::FUN_800cb618, stor[27], 0x0 ; bentIndex, set
decr stor[26] ; operand
jmp_cmp <=, 0x0, stor[26], inl[:LABEL_37] ; operand, left, right, addr
jmp_cmp !=, 0xf, var[97], inl[:LABEL_38] ; operand, left, right, addr
call Battle::scriptShowStageModelPart, 0x2 ; modelPartIndex
LABEL_38:
jmp inl[:LABEL_41] ; addr
LABEL_39:
mov var[35], stor[26] ; source, dest
decr stor[26] ; operand
LABEL_40:
mov var[34][stor[26]], stor[27] ; source, dest
call Battle::FUN_800cb618, stor[27], 0x0 ; bentIndex, set
decr stor[26] ; operand
jmp_cmp <=, 0x0, stor[26], inl[:LABEL_40] ; operand, left, right, addr
LABEL_41:
gosub inl[:LABEL_12] ; addr
return

; SUBROUTINE
LABEL_42:
gosub inl[:LABEL_3] ; addr
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_45] ; operand, left, right, addr
mov var[53], stor[26] ; source, dest
decr stor[26] ; operand
LABEL_43:
mov var[52][stor[26]], stor[27] ; source, dest
call Battle::FUN_800cb618, stor[27], 0x1 ; bentIndex, set
decr stor[26] ; operand
jmp_cmp <=, 0x0, stor[26], inl[:LABEL_43] ; operand, left, right, addr
jmp_cmp !=, 0xf, var[97], inl[:LABEL_44] ; operand, left, right, addr
call Battle::scriptHideStageModelPart, 0x2 ; modelPartIndex
LABEL_44:
jmp inl[:LABEL_47] ; addr
LABEL_45:
mov var[35], stor[26] ; source, dest
decr stor[26] ; operand
LABEL_46:
mov var[34][stor[26]], stor[27] ; source, dest
call Battle::FUN_800cb618, stor[27], 0x1 ; bentIndex, set
decr stor[26] ; operand
jmp_cmp <=, 0x0, stor[26], inl[:LABEL_46] ; operand, left, right, addr
LABEL_47:
gosub inl[:LABEL_12] ; addr
return
data 0x7
data 0x9
data 0xb
LABEL_48:
data 0xa00
data 0xfffff100
data 0x2250538
data 0x2000000
data 0x1000000
data 0xffffffff
data 0x2000018
data 0x2000019
data 0x200001a
data 0x2a0538
data 0x0
data 0x0
data 0x0
data 0x0
data 0x2000018
data 0x2a0538
data 0x0
data 0x0
data 0x1
data 0x0
data 0x2000019
data 0x2a0538
data 0x0
data 0x0
data 0x2
data 0x0
data 0x200001a
data 0x2210538
data 0x2000000
data 0x1000000
data 0xffffffff
data 0x2000018
data 0x2000019
data 0x200001a
data 0x2580138
data 0x2000010
data 0x2a0538
data 0x1
data 0x0
data 0x0
data 0x0
data 0x2000018
data 0x2a0538
data 0x1
data 0x0
data 0x1
data 0x0
data 0x2000019
data 0x2a0538
data 0x1
data 0x0
data 0x2
data 0x0
data 0x200001a
data 0x2210538
data 0x2000010
data 0x1000000
data 0xffffffff
data 0x2000018
data 0x2000019
data 0x200001a
data 0x140
data 0x9000002
data 0x208
data 0x0
data 0x200000c
data 0x2240538
data 0x2000000
data 0x1000000
data 0xffffffff
data 0x2000014
data 0x2000015
data 0x2000016
data 0x231
data 0x2000014
data 0x200001b
data 0x231
data 0x2000015
data 0x200001c
data 0x231
data 0x2000016
data 0x200001d
data 0x2360538
data 0x2000000
data 0x1000000
data 0xffffffff
data 0x2000018
data 0x2000019
data 0x200001a
data 0x218
data 0x200001b
data 0x2000018
data 0x219
data 0x200001c
data 0x2000019
data 0x218
data 0x200001d
data 0x200001a
data 0x148
data 0x900002c
data 0x2200538
data 0x2000010
data 0x1000000
data 0xffffffff
data 0x2000018
data 0x2000019
data 0x200001a
data 0x218
data 0x200001b
data 0x2000018
data 0x219
data 0x200001c
data 0x2000019
data 0x218
data 0x200001d
data 0x200001a
data 0x148
data 0x9000033
data 0x0
data 0x2360538
data 0x2000000
data 0x1000000
data 0xffffffff
data 0x2000018
data 0x2000019
data 0x200001a
data 0x148
data 0x9000010
data 0x2200538
data 0x2000010
data 0x1000000
data 0xffffffff
data 0x2000018
data 0x2000019
data 0x200001a
data 0x148
data 0x9000020
data 0x30341
data 0x200000c
data 0x4
data 0x900ffb9
data 0x50
data 0x215
data 0x8
data 0x2000018
data 0x215
data 0x8
data 0x2000019
data 0x215
data 0x8
data 0x200001a
data 0x210538
data 0x0
data 0x2000018
data 0x2000019
data 0x200001a
data 0x0
data 0x216
data 0x8
data 0x2000018
data 0x216
data 0x8
data 0x2000019
data 0x216
data 0x8
data 0x200001a
data 0x49
data 0x215
data 0x8
data 0x2000018
data 0x215
data 0x8
data 0x2000019
data 0x215
data 0x8
data 0x200001a
data 0x220538
data 0x0
data 0x2000018
data 0x2000019
data 0x200001a
data 0x0
data 0x216
data 0x8
data 0x2000018
data 0x216
data 0x8
data 0x2000019
data 0x216
data 0x8
data 0x200001a
data 0x49

; SUBROUTINE
LABEL_49:
call Battle::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_50] ; scriptIndex, address
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
return

; FORK JMP
LABEL_50:
call SEffe::scriptGetColourDifference, stor[0], 0xffffffff, stor[24], stor[25], stor[26] ; bobjIndex1, bobjIndex2, r, g, b
mov stor[24], var[14] ; source, dest
mov stor[25], var[15] ; source, dest
mov stor[26], var[16] ; source, dest
yield
jmp inl[:LABEL_50] ; addr
ENTRYPOINT_0:
gosub inl[:LABEL_3] ; addr
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_51] ; operand, left, right, addr
mov 0x0, stor[9] ; source, dest
jmp inl[:LABEL_52] ; addr
LABEL_51:
mov 0x1, stor[9] ; source, dest
LABEL_52:
gosub inl[:LABEL_72] ; addr
mov 0x4, var[25] ; source, dest
call Battle::scriptAllocateEmptyEffectManagerChild, stor[10] ; effectIndex
mov 0x86, stor[8] ; source, dest
gosub inl[:LABEL_32] ; addr
call SEffe::scriptAllocateScreenDistortionEffect, stor[stor[stor[0], 10], 22], 0x0, 0x2 ; effectIndex, angleStep, type
call SEffe::scriptAddLifespanAttachment, stor[stor[stor[0], 10], 22], 0x5 ; effectIndex, ticks
gosub inl[:LABEL_36] ; addr
call Battle::scriptAllocateEmptyEffectManagerChild, stor[15] ; effectIndex
call SEffe::scriptSetRelativePosition, stor[15], 0xffffffff, inl[:LABEL_48[stor[9]]], 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptRotateBobjTowardsPoint, stor[15], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex, parentIndex, x, y, z
call Battle::scriptAllocateEmptyEffectManagerChild, stor[20] ; effectIndex
call SEffe::scriptSetRelativePosition, stor[20], stor[15], 0x0, 0xfffffa00, 0xffffeb00 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptLoadSameScriptAndJump, stor[20], inl[:LABEL_117] ; scriptIndex, address
call Battle::scriptAllocateEmptyEffectManagerChild, stor[21] ; effectIndex
call SEffe::scriptSetRelativePosition, stor[21], stor[15], 0x0, 0xfffffc00, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptLoadSameScriptAndJump, stor[21], inl[:LABEL_118] ; scriptIndex, address
call SEffe::scriptAddRelativePositionScalerTicks1, stor[20], stor[15], 0x64, 0x0, 0xfffffc00, 0x0 ; effectIndex, parentIndex, ticks, x, y, z
call Scus94491BpeSegment::scriptPlaySound, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, unused1, unused2, initialDelay, repeatDelay
call Battle::scriptAllocateEmptyEffectManagerChild, stor[16] ; effectIndex
call SEffe::scriptSetRelativeColour, stor[16], 0xffffffff, 0xff, 0xff, 0xff ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[16], 0xffffffff, 0xf, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptSetRelativePosition, stor[16], stor[15], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeRotation, stor[16], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
mov 0x0, stor[stor[stor[0], 16], 15] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[16], inl[:LABEL_100] ; scriptIndex, address
call Battle::scriptAllocateEmptyEffectManagerChild, stor[stor[stor[0], 16], 19] ; effectIndex
mov stor[stor[stor[0], 16], 19], stor[13] ; source, dest
mov 0x0, stor[stor[stor[0], 13], 9] ; source, dest
mov stor[16], stor[stor[stor[0], 13], 28] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[13], inl[:LABEL_104] ; scriptIndex, address
call Battle::scriptAllocateEmptyEffectManagerChild, stor[stor[stor[0], 16], 20] ; effectIndex
mov stor[stor[stor[0], 16], 20], stor[13] ; source, dest
mov 0x1, stor[stor[stor[0], 13], 9] ; source, dest
mov stor[16], stor[stor[stor[0], 13], 28] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[13], inl[:LABEL_104] ; scriptIndex, address
call Battle::scriptAllocateEmptyEffectManagerChild, stor[stor[stor[0], 16], 21] ; effectIndex
mov stor[stor[stor[0], 16], 21], stor[13] ; source, dest
mov 0x2, stor[stor[stor[0], 13], 9] ; source, dest
mov stor[16], stor[stor[stor[0], 13], 28] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[13], inl[:LABEL_104] ; scriptIndex, address
mov 0x2, stor[23] ; source, dest
wait stor[23] ; frames
call SEffe::scriptAddRelativePositionScalerTicks1, stor[stor[stor[0], 16], 19], stor[15], 0x19, 0xbb8, 0xfffff448, 0xfffffc18 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddRelativePositionScalerTicks1, stor[stor[stor[0], 16], 20], stor[15], 0x19, 0x0, 0xfffff830, 0xffffec78 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddRelativePositionScalerTicks1, stor[stor[stor[0], 16], 21], stor[15], 0x19, 0xfffff448, 0xfffffc18, 0xfffffc18 ; effectIndex, parentIndex, ticks, x, y, z
mov 0x11, stor[23] ; source, dest
wait stor[23] ; frames
call SEffe::scriptAllocateScreenDistortionEffect, stor[stor[stor[0], 10], 22], 0x0, 0x2 ; effectIndex, angleStep, type
call SEffe::scriptAddLifespanAttachment, stor[stor[stor[0], 10], 22], 0x5 ; effectIndex, ticks
yield
mov 0x0, var[96] ; source, dest
mov 0x0, var[104] ; source, dest
call SEffe::scriptSetRelativePosition, stor[20], stor[15], 0xfffff000, 0x0, 0xfffff000 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativePosition, stor[21], stor[15], 0x0, 0xfffff800, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddRelativePositionScalerTicks1, stor[20], stor[15], 0x64, 0xfffff000, 0x0, 0x300 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddRelativePositionScalerTicks1, stor[21], stor[15], 0x64, 0x0, 0xfffffa00, 0x0 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::allocateDeffTmd, stor[22], 0x35100 ; effectIndex, flags
call SEffe::scriptSetEffectZ, stor[22], 0xfffffe00 ; effectIndex, z
call SEffe::scriptSetRelativePosition, stor[22], stor[15], 0x4000, 0xffffe000, 0xfffff800 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[22], 0xffffffff, 0x1000, 0x1000, 0x1000 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptRotateBobjTowardsPoint, stor[22], stor[20], 0x0, 0x0, 0x0 ; bobjIndex, parentIndex, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[22], 0x60 ; effectIndex, ticks
call SEffe::allocateDeffTmd, stor[22], 0x35101 ; effectIndex, flags
call SEffe::scriptSetEffectZ, stor[22], 0xfffffe00 ; effectIndex, z
call SEffe::scriptSetRelativePosition, stor[22], stor[15], 0x4000, 0xffffe000, 0xfffff800 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[22], 0xffffffff, 0x1000, 0x1000, 0x1000 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptRotateBobjTowardsPoint, stor[22], stor[20], 0x0, 0x0, 0x0 ; bobjIndex, parentIndex, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[22], 0x60 ; effectIndex, ticks
call SEffe::allocateDeffTmd, stor[22], 0x35102 ; effectIndex, flags
call SEffe::scriptSetRelativePosition, stor[22], stor[15], 0x4000, 0xffffe000, 0xfffff800 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[22], 0xffffffff, 0x1000, 0x1000, 0x1000 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptRotateBobjTowardsPoint, stor[22], stor[20], 0x0, 0x0, 0x0 ; bobjIndex, parentIndex, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[22], 0x60 ; effectIndex, ticks
mov 0x14, stor[23] ; source, dest
wait stor[23] ; frames
call SEffe::scriptAllocateLmbAnimation, stor[22], 0x35100 ; effectIndex, lmbFlags
call SEffe::FUN_801181a8, stor[22], 0x0, 0x3035103 ; effectIndex, index, value
call SEffe::scriptSetEffectZ, stor[22], 0xfffffc00 ; effectIndex, z
call SEffe::scriptSetEffectTranslucencyModeFlag, stor[22], 0x2 ; effectIndex, set
call SEffe::scriptSetRelativePosition, stor[22], stor[15], 0x4000, 0xffffe000, 0xfffff800 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[22], 0xffffffff, 0x1000, 0x1000, 0x1000 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptRotateBobjTowardsPoint, stor[22], stor[20], 0x0, 0x0, 0x0 ; bobjIndex, parentIndex, x, y, z
call SEffe::scriptAddGenericAttachment, stor[22], 0x0, 0x100, 0x0 ; effectIndex, genericIndex, speed, acceleration
call SEffe::scriptAddLifespanAttachment, stor[22], 0x4c ; effectIndex, ticks
mov 0x28, stor[23] ; source, dest
wait stor[23] ; frames
call Scus94491BpeSegment::scriptPlaySound, 0xa, 0x1, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, unused1, unused2, initialDelay, repeatDelay
mov 0xf, stor[23] ; source, dest
wait stor[23] ; frames
call SEffe::scriptSetRelativePosition, stor[stor[stor[0], 16], 19], stor[15], 0x12c, 0xfffffed4, 0x64 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativePosition, stor[stor[stor[0], 16], 20], stor[15], 0x0, 0xffffff38, 0x1f4 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativePosition, stor[stor[stor[0], 16], 21], stor[15], 0xfffffed4, 0xffffff9c, 0x64 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddConstantColourScalerAttachment, stor[stor[stor[0], 16], 19], 0xffffffff, 0x14, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddConstantColourScalerAttachment, stor[stor[stor[0], 16], 20], 0xffffffff, 0x14, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddConstantColourScalerAttachment, stor[stor[stor[0], 16], 21], 0xffffffff, 0x14, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
gosub inl[:LABEL_49] ; addr
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x13, 0xff, 0xff, 0xff ; effectIndex, parentIndex, ticks, destR, destG, destB
mov 0x14, stor[23] ; source, dest
wait stor[23] ; frames
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x1, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddLifespanAttachment, stor[18], 0x2 ; effectIndex, ticks
call Scus94491BpeSegment::scriptPlaySound, 0xa, 0x2, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, unused1, unused2, initialDelay, repeatDelay
call SEffe::scriptSetRelativePosition, stor[20], 0xffffffff, 0x0, 0xffffd000, 0xfffff000 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativePosition, stor[21], 0xffffffff, 0x0, 0xffffd000, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::allocateDeffTmd, stor[19], 0x35203 ; effectIndex, flags
call SEffe::scriptLoadSameScriptAndJump, stor[19], inl[:LABEL_69] ; scriptIndex, address
mov 0x0, stor[stor[stor[0], 10], 16] ; source, dest
mov 0x0, stor[stor[stor[0], 10], 17] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[10], inl[:LABEL_116] ; scriptIndex, address
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_63] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_65] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_67] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_65] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_67] ; addr
yield
gosub inl[:LABEL_68] ; addr
call Battle::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
memcpy 0x17, stor[8], stor[stor[stor[0], 18], 8] ; size, src, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_71] ; scriptIndex, address
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_63] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_65] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
yield
gosub inl[:LABEL_65] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_67] ; addr
call Battle::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
memcpy 0x17, stor[8], stor[stor[stor[0], 18], 8] ; size, src, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_71] ; scriptIndex, address
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_63] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_65] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_67] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_65] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_67] ; addr
yield
gosub inl[:LABEL_68] ; addr
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_63] ; addr
yield
gosub inl[:LABEL_60] ; addr
call Battle::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
memcpy 0x17, stor[8], stor[stor[stor[0], 18], 8] ; size, src, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_71] ; scriptIndex, address
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_63] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_65] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_67] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_65] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_67] ; addr
yield
gosub inl[:LABEL_68] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_67] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_65] ; addr
yield
gosub inl[:LABEL_60] ; addr
yield
gosub inl[:LABEL_60] ; addr
call Battle::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
memcpy 0x17, stor[8], stor[stor[stor[0], 18], 8] ; size, src, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_71] ; scriptIndex, address
yield
yield
yield
yield
yield
yield
yield
yield
yield
yield
deallocate_other stor[19] ; index
gosub inl[:LABEL_93] ; addr
gosub inl[:LABEL_49] ; addr
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0xff, 0xff, 0xff ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativePosition, stor[20], stor[15], 0x0, 0xfffffa00, 0xffffeb00 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativePosition, stor[21], stor[15], 0x0, 0xfffffc00, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
mov 0x1, var[96] ; source, dest
mov 0x1, var[104] ; source, dest
deallocate_other stor[stor[stor[0], 16], 19] ; index
deallocate_other stor[stor[stor[0], 16], 20] ; index
deallocate_other stor[stor[stor[0], 16], 21] ; index
mov 0x1, stor[stor[stor[0], 16], 15] ; source, dest
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0xf, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddLifespanAttachment, stor[18], 0x14 ; effectIndex, ticks
mov 0xa, stor[23] ; source, dest
wait stor[23] ; frames
call Battle::scriptApplyStageAmbiance ; index
deallocate_other stor[10] ; index
mov 0x3, var[25] ; source, dest
deallocate_other stor[20] ; index
deallocate_other stor[21] ; index
gosub inl[:LABEL_12] ; addr
jmp_cmp ==, 0xffffffff, stor[28], inl[:LABEL_54] ; operand, left, right, addr
mov var[51], stor[26] ; source, dest
decr stor[26] ; operand
LABEL_53:
mov var[50][stor[26]], stor[28] ; source, dest
gosub inl[:LABEL_29] ; addr
call SEffe::scriptAllocateParticleEffect, stor[22], stor[28], 0xfff03, 0xa, 0x7f, 0x5, 0xa0, 0x4197f00, 0x29 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetEffectTranslucencyModeFlag, stor[22], 0x2 ; effectIndex, set
call SEffe::scriptSetRelativePosition, stor[22], stor[28], 0x0, stor[8], 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[22], 0xffffffff, 0x500, 0x500, 0x500 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetGenericEffectValue, stor[22], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptAddLifespanAttachment, stor[22], 0x1e ; effectIndex, ticks
decr stor[26] ; operand
jmp_cmp <=, 0x0, stor[26], inl[:LABEL_53] ; operand, left, right, addr
jmp inl[:LABEL_57] ; addr
LABEL_54:
mov var[53], stor[26] ; source, dest
decr stor[26] ; operand
LABEL_55:
mov var[52][stor[26]], stor[28] ; source, dest
jmp_cmp &, stor[stor[stor[0], 28], 7], 0x200, inl[:LABEL_56] ; operand, left, right, addr
jmp_cmp &, stor[stor[stor[0], 28], 7], 0x4000, inl[:LABEL_56] ; operand, left, right, addr
gosub inl[:LABEL_30] ; addr
call SEffe::scriptAllocateParticleEffect, stor[22], stor[28], 0xfff03, 0xa, 0x7f, 0x5, 0xa0, 0x4197f00, 0x29 ; effectIndex, parentIndex, type, count, p4, p5, p6, p7, type2
call SEffe::scriptSetEffectTranslucencyModeFlag, stor[22], 0x2 ; effectIndex, set
call SEffe::scriptSetRelativePosition, stor[22], stor[28], 0x0, stor[8], 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[22], 0xffffffff, 0x500, 0x500, 0x500 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetGenericEffectValue, stor[22], 0x0, 0x1 ; effectIndex, genericIndex, value
call SEffe::scriptAddLifespanAttachment, stor[22], 0x1e ; effectIndex, ticks
LABEL_56:
decr stor[26] ; operand
jmp_cmp <=, 0x0, stor[26], inl[:LABEL_55] ; operand, left, right, addr
LABEL_57:
gosub inl[:LABEL_79] ; addr
yield
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_58] ; operand, left, right, addr
mov 0x64, stor[13] ; source, dest
jmp inl[:LABEL_59] ; addr
LABEL_58:
gosub inl[:LABEL_13] ; addr
mov stor[8], stor[13] ; source, dest
LABEL_59:
mov id[lod:night_raid], reg[0]
mov 0xf7, stor[8] ; source, dest
gosub inl[:LABEL_16] ; addr
call Scus94491BpeSegment::scriptStartRumbleMode, 0x0, 0x2 ; joypadIndex, p1
call Scus94491BpeSegment::scriptStartRumble, 0x0, 0x0, 0x14 ; joypadIndex, p1, duration
mov 0x19, stor[23] ; source, dest
wait stor[23] ; frames
mov 0x6, stor[8] ; source, dest
gosub inl[:LABEL_34] ; addr
gosub inl[:LABEL_35] ; addr
deallocate

; SUBROUTINE
LABEL_60:
jmp_cmp <, 0x0, stor[stor[stor[0], 10], 16], inl[:LABEL_61] ; operand, left, right, addr
mov 0x2, stor[stor[stor[0], 10], 16] ; source, dest
rand 0x2, stor[25] ; bound, dest
add 0x3, stor[25] ; amount, operand
call Scus94491BpeSegment::scriptPlaySound, 0xa, stor[25], 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, unused1, unused2, initialDelay, repeatDelay
LABEL_61:
call SEffe::allocateDeffTmd, stor[18], 0x35200 ; effectIndex, flags
call SEffe::scriptSetEffectTranslucencySourceFlag, stor[18], 0x1 ; effectIndex, set
rand 0x2000, stor[25] ; bound, dest
rand 0x1800, stor[26] ; bound, dest
sub 0x1000, stor[25] ; amount, operand
sub 0xc00, stor[26] ; amount, operand
add 0xffffd000, stor[26] ; amount, operand
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, stor[25], stor[26], 0x2000 ; bobjIndex1, bobjIndex2, x, y, z
rand 0x1000, stor[25] ; bound, dest
rand 0x1000, stor[26] ; bound, dest
add 0x500, stor[25] ; amount, operand
add 0x500, stor[26] ; amount, operand
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, stor[25], stor[26], 0x100 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddScaleScalerAttachment, stor[18], 0xc00, 0xc00, 0xc00, 0x0, 0x0, 0x0 ; effectIndex, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
rand 0x1000, stor[25] ; bound, dest
rand 0x1000, stor[26] ; bound, dest
rand 0x1000, stor[27] ; bound, dest
call SEffe::scriptSetRelativeRotation, stor[18], 0xffffffff, stor[25], stor[26], stor[27] ; bobjIndex1, bobjIndex2, x, y, z
rand 0x200, stor[25] ; bound, dest
sub 0x100, stor[25] ; amount, operand
call SEffe::scriptAddRotationScalerAttachment, stor[18], 0xffffffff, 0x0, 0x0, stor[25], 0x0, 0x0, 0x0 ; effectIndex, unused, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
rand 0x20000, stor[25] ; bound, dest
rand 0x20000, stor[26] ; bound, dest
sub 0x10000, stor[25] ; amount, operand
sub 0x10000, stor[26] ; amount, operand
call SEffe::scriptAddPositionScalerAttachment, stor[18], 0xffffffff, stor[25], stor[26], 0x0, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x7f, 0x7f, 0x7f ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddLifespanAttachment, stor[18], 0x4 ; effectIndex, ticks
rand 0x3, stor[23] ; bound, dest
add 0x3, stor[23] ; amount, operand
LABEL_62:
call Battle::allocateBillboardSpriteEffect, stor[22], 0x35200 ; effectIndex, flags
call SEffe::scriptSetRelativePosition, stor[22], stor[18], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
rand 0x1000, stor[25] ; bound, dest
call SEffe::scriptSetRelativeRotation, stor[22], stor[0], 0x0, 0x0, stor[25] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[22], 0xffffffff, 0x400, 0x400, 0x400 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddPositionScalerAttachment, stor[22], stor[22], 0x40000, 0x0, 0x0, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
call SEffe::scriptSetRelativeColour, stor[22], 0xffffffff, 0xff, 0xff, 0xff ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[22], 0xffffffff, 0x4, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddLifespanAttachment, stor[22], 0x4 ; effectIndex, ticks
while stor[23], inl[:LABEL_62] ; counter, addr
return

; SUBROUTINE
LABEL_63:
jmp_cmp <, 0x0, stor[stor[stor[0], 10], 17], inl[:LABEL_64] ; operand, left, right, addr
mov 0x2, stor[stor[stor[0], 10], 17] ; source, dest
call Scus94491BpeSegment::scriptPlaySound, 0xa, 0x5, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, unused1, unused2, initialDelay, repeatDelay
LABEL_64:
call SEffe::allocateDeffTmd, stor[18], 0x35201 ; effectIndex, flags
call SEffe::scriptSetEffectTranslucencySourceFlag, stor[18], 0x1 ; effectIndex, set
rand 0x2000, stor[25] ; bound, dest
rand 0x1800, stor[26] ; bound, dest
sub 0x1000, stor[25] ; amount, operand
sub 0xc00, stor[26] ; amount, operand
add 0xffffd000, stor[26] ; amount, operand
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, stor[25], stor[26], 0x2000 ; bobjIndex1, bobjIndex2, x, y, z
rand 0x500, stor[25] ; bound, dest
rand 0x500, stor[26] ; bound, dest
add 0x1000, stor[25] ; amount, operand
add 0x1000, stor[26] ; amount, operand
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, stor[25], stor[26], 0x100 ; bobjIndex1, bobjIndex2, x, y, z
rand 0x1000, stor[25] ; bound, dest
rand 0x1000, stor[26] ; bound, dest
rand 0x1000, stor[27] ; bound, dest
call SEffe::scriptSetRelativeRotation, stor[18], 0xffffffff, stor[25], stor[26], stor[27] ; bobjIndex1, bobjIndex2, x, y, z
rand 0x1000, stor[25] ; bound, dest
rand 0x1000, stor[26] ; bound, dest
sub 0x800, stor[25] ; amount, operand
sub 0x800, stor[26] ; amount, operand
call SEffe::scriptAddPositionScalerAttachment, stor[18], 0xffffffff, stor[25], stor[26], 0x0, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x7f, 0x7f, 0x7f ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x8, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddLifespanAttachment, stor[18], 0x8 ; effectIndex, ticks
return

; SUBROUTINE
LABEL_65:
jmp_cmp <, 0x0, stor[stor[stor[0], 10], 17], inl[:LABEL_66] ; operand, left, right, addr
mov 0x2, stor[stor[stor[0], 10], 17] ; source, dest
call Scus94491BpeSegment::scriptPlaySound, 0xa, 0x5, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, unused1, unused2, initialDelay, repeatDelay
LABEL_66:
call SEffe::allocateDeffTmd, stor[18], 0x35202 ; effectIndex, flags
call SEffe::scriptSetEffectTranslucencySourceFlag, stor[18], 0x1 ; effectIndex, set
rand 0x2000, stor[25] ; bound, dest
rand 0x1800, stor[26] ; bound, dest
sub 0x1000, stor[25] ; amount, operand
sub 0xc00, stor[26] ; amount, operand
add 0xffffd000, stor[26] ; amount, operand
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, stor[25], stor[26], 0x2000 ; bobjIndex1, bobjIndex2, x, y, z
rand 0x500, stor[25] ; bound, dest
rand 0x500, stor[26] ; bound, dest
add 0x1000, stor[25] ; amount, operand
add 0x1000, stor[26] ; amount, operand
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, stor[25], stor[26], 0x100 ; bobjIndex1, bobjIndex2, x, y, z
rand 0x1000, stor[25] ; bound, dest
call SEffe::scriptSetRelativeRotation, stor[18], 0xffffffff, 0x0, 0x0, stor[25] ; bobjIndex1, bobjIndex2, x, y, z
rand 0x1000, stor[25] ; bound, dest
rand 0x1000, stor[26] ; bound, dest
sub 0x800, stor[25] ; amount, operand
sub 0x800, stor[26] ; amount, operand
call SEffe::scriptAddPositionScalerAttachment, stor[18], 0xffffffff, stor[25], stor[26], 0x0, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x7f, 0x7f, 0x7f ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x8, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddLifespanAttachment, stor[18], 0x8 ; effectIndex, ticks
return

; SUBROUTINE
LABEL_67:
call SEffe::scriptAllocateLmbAnimation, stor[18], 0x35201 ; effectIndex, lmbFlags
call SEffe::FUN_801181f0, stor[18], 0x8, 0x46, 0x0, 0x800 ; effectIndex, p1, p2, p3, p4
call SEffe::FUN_801181a8, stor[18], 0x0, 0x40fff26 ; effectIndex, index, value
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x30, 0x30, 0x7f ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x6, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
rand 0x2000, stor[25] ; bound, dest
rand 0x1800, stor[26] ; bound, dest
sub 0x1000, stor[25] ; amount, operand
sub 0xc00, stor[26] ; amount, operand
add 0xffffd000, stor[26] ; amount, operand
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, stor[25], stor[26], 0x2000 ; bobjIndex1, bobjIndex2, x, y, z
rand 0x200, stor[25] ; bound, dest
add 0x800, stor[25] ; amount, operand
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, stor[25], stor[25], stor[25] ; bobjIndex1, bobjIndex2, x, y, z
rand 0x1000, stor[25] ; bound, dest
rand 0x1000, stor[26] ; bound, dest
rand 0x1000, stor[27] ; bound, dest
call SEffe::scriptSetRelativeRotation, stor[18], 0xffffffff, stor[25], stor[26], stor[27] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetGenericEffectValue, stor[18], 0x0, 0x0 ; effectIndex, genericIndex, value
call SEffe::scriptAddGenericAttachment, stor[18], 0x0, 0x1a00, 0x0 ; effectIndex, genericIndex, speed, acceleration
call SEffe::scriptAddLifespanAttachment, stor[18], 0x7 ; effectIndex, ticks
mov 0x2, stor[23] ; source, dest
wait stor[23] ; frames
return

; SUBROUTINE
LABEL_68:
call SEffe::scriptAllocateLmbAnimation, stor[18], 0x35201 ; effectIndex, lmbFlags
call SEffe::FUN_801181f0, stor[18], 0x8, 0x46, 0x0, 0x800 ; effectIndex, p1, p2, p3, p4
call SEffe::FUN_801181a8, stor[18], 0x0, 0x40fff26 ; effectIndex, index, value
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x7f, 0x30, 0x30 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[18], 0xffffffff, 0x6, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
rand 0x2000, stor[25] ; bound, dest
rand 0x1800, stor[26] ; bound, dest
sub 0x1000, stor[25] ; amount, operand
sub 0xc00, stor[26] ; amount, operand
add 0xffffd000, stor[26] ; amount, operand
call SEffe::scriptSetRelativePosition, stor[18], 0xffffffff, stor[25], stor[26], 0x2000 ; bobjIndex1, bobjIndex2, x, y, z
rand 0x200, stor[25] ; bound, dest
add 0x800, stor[25] ; amount, operand
call SEffe::scriptSetRelativeScale, stor[18], 0xffffffff, stor[25], stor[25], stor[25] ; bobjIndex1, bobjIndex2, x, y, z
rand 0x1000, stor[25] ; bound, dest
rand 0x1000, stor[26] ; bound, dest
rand 0x1000, stor[27] ; bound, dest
call SEffe::scriptSetRelativeRotation, stor[18], 0xffffffff, stor[25], stor[26], stor[27] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetGenericEffectValue, stor[18], 0x0, 0x0 ; effectIndex, genericIndex, value
call SEffe::scriptAddGenericAttachment, stor[18], 0x0, 0x1a00, 0x0 ; effectIndex, genericIndex, speed, acceleration
call SEffe::scriptAddLifespanAttachment, stor[18], 0x7 ; effectIndex, ticks
mov 0x2, stor[23] ; source, dest
wait stor[23] ; frames
return

; FORK JMP
LABEL_69:
call SEffe::scriptSetEffectZ, stor[0], 0xfffffc00 ; effectIndex, z
rand 0x2000, stor[25] ; bound, dest
rand 0x1800, stor[26] ; bound, dest
sub 0x1000, stor[25] ; amount, operand
sub 0xc00, stor[26] ; amount, operand
add 0xffffd000, stor[26] ; amount, operand
call SEffe::scriptSetRelativePosition, stor[0], 0xffffffff, 0x3000, 0xffffd000, 0x2000 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[0], 0xffffffff, 0x2000, 0x2000, 0x2000 ; bobjIndex1, bobjIndex2, x, y, z
rand 0x1000, stor[25] ; bound, dest
rand 0x1000, stor[26] ; bound, dest
rand 0x1000, stor[27] ; bound, dest
call SEffe::scriptSetRelativeRotation, stor[0], 0xffffffff, stor[25], stor[26], stor[27] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddRotationScalerAttachment, stor[0], 0xffffffff, 0x100, 0x200, 0x300, 0x0, 0x0, 0x0 ; effectIndex, unused, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
call SEffe::scriptSetRelativeColour, stor[0], 0xffffffff, 0x7f, 0x7f, 0x7f ; bobjIndex1, bobjIndex2, r, g, b
LABEL_70:
rand 0x800, stor[25] ; bound, dest
rand 0x600, stor[26] ; bound, dest
sub 0x400, stor[25] ; amount, operand
sub 0x300, stor[26] ; amount, operand
add 0xffffd000, stor[26] ; amount, operand
rand 0x2, stor[27] ; bound, dest
add 0x4, stor[27] ; amount, operand
call SEffe::scriptAddRelativePositionScalerTicks1, stor[0], 0xffffffff, stor[27], stor[25], stor[26], 0x2000 ; effectIndex, parentIndex, ticks, x, y, z
wait stor[27] ; frames
jmp inl[:LABEL_70] ; addr

; FORK JMP
LABEL_71:
gosub inl[:LABEL_86] ; addr
yield
yield
yield
gosub inl[:LABEL_106] ; addr
call SEffe::scriptSetRelativePosition, stor[stor[stor[0], 16], 19], stor[20], 0x0, 0xffffb000, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativePosition, stor[stor[stor[0], 16], 20], stor[20], 0xffffb000, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativePosition, stor[stor[stor[0], 16], 21], stor[20], 0x5000, 0x5000, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[stor[stor[0], 16], 19], 0xffffffff, 0xff, 0xff, 0xff ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeColour, stor[stor[stor[0], 16], 20], 0xffffffff, 0xff, 0xff, 0xff ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeColour, stor[stor[stor[0], 16], 21], 0xffffffff, 0xff, 0xff, 0xff ; bobjIndex1, bobjIndex2, r, g, b
yield
yield
yield
yield
yield
call SEffe::scriptSetRelativeColour, stor[stor[stor[0], 16], 19], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeColour, stor[stor[stor[0], 16], 20], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeColour, stor[stor[stor[0], 16], 21], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativePosition, stor[20], 0xffffffff, 0x0, 0xffffd000, 0xfffff000 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativePosition, stor[21], 0xffffffff, 0x0, 0xffffd000, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
deallocate

; SUBROUTINE
LABEL_72:
gosub inl[:LABEL_7] ; addr
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_75] ; operand, left, right, addr
mov var[53], stor[26] ; source, dest
decr stor[26] ; operand
LABEL_73:
mov var[52][stor[26]], stor[27] ; source, dest
jmp_cmp &, stor[stor[stor[0], 27], 7], 0x200, inl[:LABEL_74] ; operand, left, right, addr
jmp_cmp &, stor[stor[stor[0], 27], 7], 0x4000, inl[:LABEL_74] ; operand, left, right, addr
call Battle::scriptGetLoadingBentAnimationIndex, stor[27], stor[stor[stor[0], 27], 18] ; bentIndex, animationIndex
LABEL_74:
decr stor[26] ; operand
jmp_cmp <=, 0x0, stor[26], inl[:LABEL_73] ; operand, left, right, addr
jmp inl[:LABEL_78] ; addr
LABEL_75:
mov var[51], stor[26] ; source, dest
decr stor[26] ; operand
LABEL_76:
mov var[50][stor[26]], stor[27] ; source, dest
jmp_cmp &, stor[stor[stor[0], 27], 7], 0x200, inl[:LABEL_77] ; operand, left, right, addr
jmp_cmp &, stor[stor[stor[0], 27], 7], 0x4000, inl[:LABEL_77] ; operand, left, right, addr
call Battle::scriptGetLoadingBentAnimationIndex, stor[27], stor[stor[stor[0], 27], 18] ; bentIndex, animationIndex
LABEL_77:
decr stor[26] ; operand
jmp_cmp <=, 0x0, stor[26], inl[:LABEL_76] ; operand, left, right, addr
LABEL_78:
gosub inl[:LABEL_12] ; addr
return

; SUBROUTINE
LABEL_79:
gosub inl[:LABEL_7] ; addr
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_82] ; operand, left, right, addr
mov var[53], stor[26] ; source, dest
decr stor[26] ; operand
LABEL_80:
mov var[52][stor[26]], stor[27] ; source, dest
jmp_cmp &, stor[stor[stor[0], 27], 7], 0x200, inl[:LABEL_81] ; operand, left, right, addr
jmp_cmp &, stor[stor[stor[0], 27], 7], 0x4000, inl[:LABEL_81] ; operand, left, right, addr
call Battle::scriptSetLoadingBentAnimationIndex, stor[27], stor[stor[stor[0], 27], 18] ; bentIndex, animIndex
LABEL_81:
decr stor[26] ; operand
jmp_cmp <=, 0x0, stor[26], inl[:LABEL_80] ; operand, left, right, addr
jmp inl[:LABEL_85] ; addr
LABEL_82:
mov var[51], stor[26] ; source, dest
decr stor[26] ; operand
LABEL_83:
mov var[50][stor[26]], stor[27] ; source, dest
jmp_cmp &, stor[stor[stor[0], 27], 7], 0x200, inl[:LABEL_84] ; operand, left, right, addr
jmp_cmp &, stor[stor[stor[0], 27], 7], 0x4000, inl[:LABEL_84] ; operand, left, right, addr
call Battle::scriptSetLoadingBentAnimationIndex, stor[27], stor[stor[stor[0], 27], 18] ; bentIndex, animIndex
LABEL_84:
decr stor[26] ; operand
jmp_cmp <=, 0x0, stor[26], inl[:LABEL_83] ; operand, left, right, addr
LABEL_85:
gosub inl[:LABEL_12] ; addr
return

; SUBROUTINE
LABEL_86:
gosub inl[:LABEL_7] ; addr
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_89] ; operand, left, right, addr
mov var[53], stor[26] ; source, dest
decr stor[26] ; operand
LABEL_87:
mov var[52][stor[26]], stor[27] ; source, dest
jmp_cmp &, stor[stor[stor[0], 27], 7], 0x200, inl[:LABEL_88] ; operand, left, right, addr
jmp_cmp &, stor[stor[stor[0], 27], 7], 0x4000, inl[:LABEL_88] ; operand, left, right, addr
call Battle::scriptSetLoadingBentAnimationIndex, stor[27], 0x1 ; bentIndex, animIndex
LABEL_88:
decr stor[26] ; operand
jmp_cmp <=, 0x0, stor[26], inl[:LABEL_87] ; operand, left, right, addr
jmp inl[:LABEL_92] ; addr
LABEL_89:
mov var[51], stor[26] ; source, dest
decr stor[26] ; operand
LABEL_90:
mov var[50][stor[26]], stor[27] ; source, dest
jmp_cmp &, stor[stor[stor[0], 27], 7], 0x200, inl[:LABEL_91] ; operand, left, right, addr
jmp_cmp &, stor[stor[stor[0], 27], 7], 0x4000, inl[:LABEL_91] ; operand, left, right, addr
call Battle::scriptSetLoadingBentAnimationIndex, stor[27], 0x1 ; bentIndex, animIndex
LABEL_91:
decr stor[26] ; operand
jmp_cmp <=, 0x0, stor[26], inl[:LABEL_90] ; operand, left, right, addr
LABEL_92:
gosub inl[:LABEL_12] ; addr
return

; SUBROUTINE
LABEL_93:
gosub inl[:LABEL_7] ; addr
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_96] ; operand, left, right, addr
mov var[53], stor[26] ; source, dest
decr stor[26] ; operand
LABEL_94:
mov var[52][stor[26]], stor[27] ; source, dest
jmp_cmp &, stor[stor[stor[0], 27], 7], 0x200, inl[:LABEL_95] ; operand, left, right, addr
jmp_cmp &, stor[stor[stor[0], 27], 7], 0x4000, inl[:LABEL_95] ; operand, left, right, addr
call Battle::scriptPauseAnimation, stor[27] ; bentIndex
LABEL_95:
decr stor[26] ; operand
jmp_cmp <=, 0x0, stor[26], inl[:LABEL_94] ; operand, left, right, addr
jmp inl[:LABEL_99] ; addr
LABEL_96:
mov var[51], stor[26] ; source, dest
decr stor[26] ; operand
LABEL_97:
mov var[50][stor[26]], stor[27] ; source, dest
jmp_cmp &, stor[stor[stor[0], 27], 7], 0x200, inl[:LABEL_98] ; operand, left, right, addr
jmp_cmp &, stor[stor[stor[0], 27], 7], 0x4000, inl[:LABEL_98] ; operand, left, right, addr
call Battle::scriptPauseAnimation, stor[27] ; bentIndex
LABEL_98:
decr stor[26] ; operand
jmp_cmp <=, 0x0, stor[26], inl[:LABEL_97] ; operand, left, right, addr
LABEL_99:
gosub inl[:LABEL_12] ; addr
return

; FORK JMP
LABEL_100:
mov var[109], stor[9] ; source, dest
call Battle::scriptGetBattleBackgroundLightColour, stor[10], stor[11], stor[12] ; r, g, b
LABEL_101:
call SEffe::scriptGetColourDifference, stor[0], 0xffffffff, stor[25], stor[26], stor[27] ; bobjIndex1, bobjIndex2, r, g, b
mul 0x10, stor[25] ; amount, operand
div 0x100, stor[25] ; amount, operand
call Battle::scriptApplyScreenDarkening, stor[25] ; intensity
shr 0x1, stor[26] ; shift, val
mov stor[26], var[109] ; source, dest
mul 0x8, stor[27] ; amount, operand
call Battle::scriptSetBattleBackgroundLightColour, stor[27], stor[27], stor[27] ; r, g, b
jmp_cmp !=, 0x0, stor[15], inl[:LABEL_102] ; operand, left, right, addr
yield
jmp inl[:LABEL_101] ; addr
LABEL_102:
call SEffe::scriptAddConstantColourScalerAttachment, stor[0], 0xffffffff, 0xa, 0xff, 0xff, 0xff ; effectIndex, parentIndex, ticks, destR, destG, destB
mov 0xa, stor[23] ; source, dest
LABEL_103:
call SEffe::scriptGetColourDifference, stor[0], 0xffffffff, stor[25], stor[26], stor[27] ; bobjIndex1, bobjIndex2, r, g, b
mul 0x10, stor[25] ; amount, operand
div 0x100, stor[25] ; amount, operand
call Battle::scriptApplyScreenDarkening, stor[25] ; intensity
shr 0x1, stor[26] ; shift, val
mov stor[26], var[109] ; source, dest
mul 0x8, stor[27] ; amount, operand
call Battle::scriptSetBattleBackgroundLightColour, stor[27], stor[27], stor[27] ; r, g, b
yield
while stor[23], inl[:LABEL_103] ; counter, addr
call Battle::scriptApplyScreenDarkening, 0x10 ; intensity
mov 0x80, var[109] ; source, dest
call Battle::scriptSetBattleBackgroundLightColour, stor[10], stor[11], stor[12] ; r, g, b
deallocate

; FORK JMP
LABEL_104:
call Battle::scriptGetBattleLightColour, stor[9], stor[25], stor[26], stor[27] ; lightIndex, r, g, b
call SEffe::scriptSetRelativeColour, stor[0], 0xffffffff, stor[25], stor[26], stor[27] ; bobjIndex1, bobjIndex2, r, g, b
call Battle::scriptGetLightDirection, stor[9], stor[25], stor[26], stor[27] ; lightIndex, x, y, z
call SEffe::scriptSetRelativePosition, stor[0], stor[28], stor[25], stor[26], stor[27] ; bobjIndex1, bobjIndex2, x, y, z
LABEL_105:
call SEffe::scriptGetColourDifference, stor[0], 0xffffffff, stor[25], stor[26], stor[27] ; bobjIndex1, bobjIndex2, r, g, b
call Battle::scriptSetBattleLightColour, stor[9], stor[25], stor[26], stor[27] ; lightIndex, r, g, b
call SEffe::scriptGetRelativePosition, stor[0], stor[28], stor[25], stor[26], stor[27] ; bobjIndex, parentIndex, x, y, z
call Battle::scriptSetLightDirection, stor[9], stor[25], stor[26], stor[27] ; lightIndex, x, y, z
yield
jmp inl[:LABEL_105] ; addr

; SUBROUTINE
LABEL_106:
mov 0x0, stor[stor[stor[0], 10], 15] ; source, dest
mov 0x0, stor[stor[stor[0], 10], 16] ; source, dest
mov 0x0, stor[stor[stor[0], 10], 17] ; source, dest
mov 0x0, stor[stor[stor[0], 10], 25] ; source, dest
mov 0x0, stor[stor[stor[0], 10], 26] ; source, dest
mov 0x0, stor[stor[stor[0], 10], 27] ; source, dest
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_110] ; operand, left, right, addr
mov var[53], stor[stor[stor[0], 10], 23] ; source, dest
mov var[53], stor[stor[stor[0], 10], 24] ; source, dest
LABEL_107:
decr stor[stor[stor[0], 10], 23] ; operand
mov stor[stor[stor[0], 10], 23], stor[25] ; source, dest
mov var[52][stor[25]], stor[28] ; source, dest
jmp_cmp &, stor[stor[stor[0], 28], 7], 0x200, inl[:LABEL_108] ; operand, left, right, addr
jmp_cmp &, stor[stor[stor[0], 28], 7], 0x4000, inl[:LABEL_108] ; operand, left, right, addr
call SEffe::scriptGetRelativePosition, stor[28], 0xffffffff, stor[25], stor[26], stor[27] ; bobjIndex, parentIndex, x, y, z
gosub inl[:LABEL_30] ; addr
add stor[8], stor[26] ; amount, operand
add stor[25], stor[stor[stor[0], 10], 25] ; amount, operand
add stor[26], stor[stor[stor[0], 10], 26] ; amount, operand
add stor[27], stor[stor[stor[0], 10], 27] ; amount, operand
jmp inl[:LABEL_109] ; addr
LABEL_108:
decr stor[stor[stor[0], 10], 24] ; operand
LABEL_109:
incr stor[stor[stor[0], 10], 23] ; operand
while stor[stor[stor[0], 10], 23], inl[:LABEL_107] ; counter, addr
jmp inl[:LABEL_114] ; addr
LABEL_110:
mov var[51], stor[stor[stor[0], 10], 23] ; source, dest
mov var[51], stor[stor[stor[0], 10], 24] ; source, dest
LABEL_111:
decr stor[stor[stor[0], 10], 23] ; operand
mov stor[stor[stor[0], 10], 23], stor[25] ; source, dest
mov var[50][stor[25]], stor[28] ; source, dest
jmp_cmp &, stor[stor[stor[0], 28], 7], 0x200, inl[:LABEL_112] ; operand, left, right, addr
jmp_cmp &, stor[stor[stor[0], 28], 7], 0x4000, inl[:LABEL_112] ; operand, left, right, addr
call SEffe::scriptGetRelativePosition, stor[28], 0xffffffff, stor[25], stor[26], stor[27] ; bobjIndex, parentIndex, x, y, z
gosub inl[:LABEL_29] ; addr
add stor[8], stor[26] ; amount, operand
add stor[25], stor[stor[stor[0], 10], 25] ; amount, operand
add stor[26], stor[stor[stor[0], 10], 26] ; amount, operand
add stor[27], stor[stor[stor[0], 10], 27] ; amount, operand
jmp inl[:LABEL_113] ; addr
LABEL_112:
decr stor[stor[stor[0], 10], 24] ; operand
LABEL_113:
incr stor[stor[stor[0], 10], 23] ; operand
while stor[stor[stor[0], 10], 23], inl[:LABEL_111] ; counter, addr
LABEL_114:
jmp_cmp ==, 0x0, stor[stor[stor[0], 10], 24], inl[:LABEL_115] ; operand, left, right, addr
div stor[stor[stor[0], 10], 24], stor[stor[stor[0], 10], 25] ; amount, operand
div stor[stor[stor[0], 10], 24], stor[stor[stor[0], 10], 26] ; amount, operand
div stor[stor[stor[0], 10], 24], stor[stor[stor[0], 10], 27] ; amount, operand
LABEL_115:
call SEffe::scriptSetRelativePosition, stor[21], 0xffffffff, stor[stor[stor[0], 10], 25], stor[stor[stor[0], 10], 26], stor[stor[stor[0], 10], 27] ; bobjIndex1, bobjIndex2, x, y, z
rand 0x1000, stor[stor[stor[0], 10], 9] ; bound, dest
sin_12 stor[stor[stor[0], 10], 9], stor[25] ; angle, dest
cos_12 stor[stor[stor[0], 10], 9], stor[27] ; angle, dest
mul 0x3, stor[25] ; amount, operand
mul 0x3, stor[27] ; amount, operand
shr 0x1, stor[25] ; shift, val
shr 0x1, stor[27] ; shift, val
rand 0x1000, stor[26] ; bound, dest
neg stor[26] ; operand
add stor[25], stor[stor[stor[0], 10], 25] ; amount, operand
add stor[26], stor[stor[stor[0], 10], 26] ; amount, operand
add stor[27], stor[stor[stor[0], 10], 27] ; amount, operand
call SEffe::scriptSetRelativePosition, stor[20], 0xffffffff, stor[stor[stor[0], 10], 25], stor[stor[stor[0], 10], 26], stor[stor[stor[0], 10], 27] ; bobjIndex1, bobjIndex2, x, y, z
return

; FORK JMP
LABEL_116:
decr stor[16] ; operand
decr stor[17] ; operand
yield
jmp inl[:LABEL_116] ; addr

; FORK JMP
LABEL_117:
call SEffe::scriptGetEffectTranslationRelativeToParent, stor[0], 0xffffffff, stor[25], stor[26], stor[27] ; effectIndex, parentIndex, x, y, z
shl 0x8, stor[25] ; shift, val
shl 0x8, stor[26] ; shift, val
shl 0x8, stor[27] ; shift, val
call Battle::FUN_800dac20, 0x0, stor[25], stor[26], stor[27], 0x0 ; mode, x, y, z, scriptIndex
yield
jmp inl[:LABEL_117] ; addr

; FORK JMP
LABEL_118:
call SEffe::scriptGetEffectTranslationRelativeToParent, stor[0], 0xffffffff, stor[25], stor[26], stor[27] ; effectIndex, parentIndex, x, y, z
shl 0x8, stor[25] ; shift, val
shl 0x8, stor[26] ; shift, val
shl 0x8, stor[27] ; shift, val
call Battle::FUN_800db034, 0x0, stor[25], stor[26], stor[27], 0x0 ; mode, x, y, z, scriptIndex
yield
jmp inl[:LABEL_118] ; addr

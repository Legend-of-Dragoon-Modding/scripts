entrypoint :ENTRYPOINT_0
data 0x10c
data 0xf00ff2d
data 0x49
data 0x0
data 0x930238
data 0x2000000
data 0x2000008
data 0x20242
data 0x2000008
data 0x900fffc
data 0x49
data 0x0
data 0x930238
data 0x200001c
data 0x2000008
data 0x20242
data 0x2000008
data 0x900fffc
data 0x49
data 0x60341
data 0x1000000
data 0x2
data 0x3071c00
data 0x9000030
data 0x60341
data 0x1000000
data 0x40
data 0x3071c00
data 0x9000039
data 0xa90338
data 0x200001c
data 0x1000000
data 0x5
data 0x2000008
data 0x60341
data 0x1000000
data 0x10
data 0x2000008
data 0x900002f
data 0xb10338
data 0x200001c
data 0x2
data 0x2000008
data 0x50242
data 0x2000008
data 0x9000026
data 0xb10338
data 0x200001c
data 0x6
data 0x2000009
data 0x221
data 0x4
data 0x2000009
data 0x50341
data 0x2000009
data 0x2000008
data 0x9000038
data 0xa90338
data 0x200001c
data 0x1000000
data 0x5
data 0x2000008
data 0x60341
data 0x1000000
data 0x40
data 0x2000008
data 0x9000021
data 0x8f0238
data 0x200001c
data 0x2000008
data 0x20341
data 0x0
data 0x2000008
data 0x9000034
data 0x1420238
data 0x200001c
data 0x0
data 0x920238
data 0x200001c
data 0x1
data 0x49
data 0x8f0238
data 0x200001c
data 0x2000008
data 0x20341
data 0xe
data 0x2000008
data 0x9000026
data 0x1420238
data 0x200001c
data 0xe
data 0x920238
data 0x200001c
data 0x0
data 0x49
data 0x8f0238
data 0x200001c
data 0x2000008
data 0x20341
data 0xa
data 0x2000008
data 0x9000018
data 0x1420238
data 0x200001c
data 0xa
data 0x920238
data 0x200001c
data 0x1
data 0x49
data 0x8f0238
data 0x200001c
data 0x2000008
data 0x20341
data 0xb
data 0x2000008
data 0x900000a
data 0x1420238
data 0x200001c
data 0xb
data 0x920238
data 0x200001c
data 0x1
data 0x49
data 0x1730338
data 0x200001c
data 0x200000a
data 0x0
data 0x208
data 0x2000008
data 0x10050a80
data 0x208
data 0x5
data 0x10000a80
data 0xa80338
data 0x200001e
data 0x2000008
data 0x25
data 0x1ed0138
data 0x200001e
data 0x208
data 0x2000008
data 0xf00772d
data 0xa90338
data 0x200001e
data 0x48
data 0x2000009
data 0x60341
data 0x80
data 0x2000009
data 0x900000a
data 0x1e00338
data 0x200001e
data 0x200001c
data 0x2000009
data 0x140
data 0x9000006
data 0x1fb0338
data 0x200001e
data 0x200001c
data 0x2000009
data 0x20242
data 0x2000009
data 0x900001b
data 0x148
data 0x900001c
data 0x208
data 0x2000009
data 0xf00772d
data 0x20242
data 0x2000008
data 0x900000f
data 0xa90338
data 0x200001e
data 0x5
data 0x2000009
data 0x70341
data 0x1000000
data 0x8
data 0x2000009
data 0x9000008
data 0x216
data 0x1
data 0x2000008
data 0x208
data 0xf00772d
data 0x2000009
data 0x49
data 0x208
data 0xffffffff
data 0x2000008
data 0x49
data 0xa90338
data 0x200001e
data 0x48
data 0x2000008
data 0x60341
data 0x80
data 0x2000008
data 0x900000a
data 0x1e10438
data 0x200001e
data 0x200001c
data 0x2000008
data 0x200000a
data 0x49
data 0x1ec0538
data 0x200001e
data 0x200001c
data 0xf00772d
data 0x2000008
data 0x200000a
data 0x49

; SUBROUTINE
LABEL_0:
call Battle::scriptGetBentSlot, stor[28], stor[10], 0x0 ; bentIndex, charOrBentSlot, mode
mov stor[8], var[128 + stor[10]][5] ; source, dest
mov 0x3, var[128 + stor[10]][0] ; source, dest
call Battle::scriptSetBentStat, stor[30], id[lod:thunderbolt], ITEM_ID ; bentIndex, value, statIndex
mov stor[8], var[45][119] ; source, dest
call Battle::scriptCheckItemHit, stor[30], stor[28], stor[9] ; attackerIndex, defenderIndex, hit
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_2] ; operand, left, right, addr
call Battle::scriptItemMagicAttack, stor[30], stor[28], stor[8], stor[8], stor[10] ; attackerIndex, defenderIndex, unused, damage, specialEffects
mov stor[10], var[45][119] ; source, dest
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_1] ; operand, left, right, addr
call Battle::scriptGetBentStat, stor[30], STATUS, stor[10] ; bentIndex, statIndex, value
jmp_cmp !&, 0x8, stor[10], inl[:LABEL_1] ; operand, left, right, addr
shr 0x1, stor[8] ; shift, val
LABEL_1:
mov var[45][119], stor[10] ; source, dest
return
LABEL_2:
mov 0xffffffff, stor[8] ; source, dest
mov 0xfffffffe, stor[10] ; source, dest
return
data 0xa80338
data 0x200001e
data 0x2000008
data 0x25
data 0x1ed0138
data 0x200001e
data 0x208
data 0x2000008
data 0xf00772d
data 0x1fb0338
data 0x200001e
data 0x200001c
data 0x2000009
data 0x20242
data 0x2000009
data 0x9000021
data 0x1730338
data 0x200001c
data 0x200000a
data 0x0
data 0x208
data 0x2000008
data 0x10050a80
data 0x208
data 0x2
data 0x10000a80
data 0x208
data 0x200001e
data 0x10030a80
data 0x208
data 0x2000008
data 0x10020a80
data 0xa90338
data 0x200001e
data 0x50
data 0x2000008
data 0x208
data 0x2000008
data 0x10010a80
data 0x1ec0538
data 0x200001e
data 0x200001c
data 0xf00772d
data 0x2000008
data 0x200000a
data 0x49
data 0x208
data 0xffffffff
data 0x2000008
data 0x49
data 0x1730338
data 0x2000000
data 0x2000008
data 0x0
data 0x208
data 0x1
data 0x2000009
data 0x215
data 0x2000008
data 0x2000009
data 0x211
data 0x2000009
data 0xf00f62d
data 0x49
data 0x1730338
data 0x2000000
data 0x2000008
data 0x0
data 0x208
data 0x1
data 0x2000009
data 0x215
data 0x2000008
data 0x2000009
data 0x11d
data 0x2000009
data 0x11c
data 0x2000009
data 0x210
data 0x2000009
data 0xf00f62d
data 0x49
data 0x10c
data 0x2000008
data 0x70341
data 0x1000000
data 0x200000
data 0x3071c00
data 0x9000007
data 0x11b
data 0x2000008
data 0x49
data 0x357
data 0x200001c
data 0xa
data 0x2000008
data 0x0
data 0x60341
data 0x1000000
data 0x200000
data 0x3071c00
data 0x900ffff
data 0x0
data 0x0
data 0x49
data 0x60341
data 0x1000000
data 0x40
data 0x3071c00
data 0x9000029
data 0xb10338
data 0x200001c
data 0x2
data 0x200000a
data 0x218
data 0x2000008
data 0x200000a
data 0xb10338
data 0x200001c
data 0x6
data 0x2000009
data 0x50341
data 0x2000009
data 0x200000a
data 0x9000011
data 0xb10338
data 0x200001c
data 0x2
data 0x2000008
data 0x208
data 0x2000009
data 0x200000a
data 0x219
data 0x2000008
data 0x2000009
data 0x208
data 0x2000009
data 0x2000008
data 0x1ee0338
data 0x200001c
data 0x2000008
data 0x7
data 0xb20338
data 0x200001c
data 0x200000a
data 0x2
data 0x49
data 0x60341
data 0x1000000
data 0x40
data 0x3071c00
data 0x9000029
data 0xa90338
data 0x200001c
data 0x4
data 0x200000a
data 0x218
data 0x2000008
data 0x200000a
data 0xa90338
data 0x200001c
data 0x7
data 0x2000009
data 0x50341
data 0x2000009
data 0x200000a
data 0x9000011
data 0xa90338
data 0x200001c
data 0x4
data 0x2000008
data 0x208
data 0x2000009
data 0x200000a
data 0x219
data 0x2000008
data 0x2000009
data 0x208
data 0x2000009
data 0x2000008
data 0x1ee0338
data 0x200001c
data 0x2000008
data 0xc
data 0xb20338
data 0x200001c
data 0x200000a
data 0x4
data 0x49
data 0x60341
data 0x1000000
data 0x40
data 0x3071c00
data 0x900001f
data 0x1e70338
data 0x200001c
data 0x2000008
data 0x2000009
data 0x1ee0338
data 0x200001c
data 0x2000008
data 0xd
data 0x70341
data 0x1000000
data 0x2
data 0x3071c00
data 0x9000012
data 0x221
data 0x64
data 0x2000008
data 0x1730338
data 0x200001c
data 0x2000009
data 0x1
data 0x218
data 0x45
data 0x2000009
data 0x218
data 0x2000008
data 0x700092d
data 0x49
data 0x0
data 0x208
data 0x5000031
data 0x2000009
data 0x10c
data 0x200000a
data 0x10c
data 0x200000b
data 0x10c
data 0x200000c
data 0x10c
data 0x2000008
data 0x208
data 0x7000830
data 0x200000c
data 0x208
data 0x3070c00
data 0x200000a
data 0x210
data 0x1000000
data 0x200000
data 0x200000a
data 0x211
data 0x200000a
data 0x200000b
data 0x11b
data 0x2000008
data 0x40341
data 0x2000009
data 0x2000008
data 0x900fff1
data 0x30242
data 0x200000b
data 0x900ffe1
data 0x0
data 0x0
data 0x49
data 0x0
data 0x1f40138
data 0x2000008
data 0x30242
data 0x2000008
data 0x900fffd
data 0x49
data 0x1730338
data 0x200001c
data 0x2000009
data 0x0
data 0x218
data 0x81
data 0x2000009
data 0x10c
data 0x700092d
data 0xa90338
data 0x200001c
data 0x1000000
data 0x5
data 0x2000008
data 0x210
data 0x1000000
data 0xffffff00
data 0x2000008
data 0xa80338
data 0x200001c
data 0x2000008
data 0x1000000
data 0x5
data 0x49
data 0x40242
data 0xf00402d
data 0x900006e
data 0xa80338
data 0x200001e
data 0xf00402d
data 0x29
data 0x1e10438
data 0x200001e
data 0x200001c
data 0x2000009
data 0x200000a
data 0x208
data 0x200000a
data 0xf00f12d
data 0xa90338
data 0x200001e
data 0x5
data 0x200000b
data 0x70341
data 0x1000000
data 0x8
data 0x200000b
data 0x900000b
data 0x20242
data 0x2000009
data 0x9000006
data 0x216
data 0x1
data 0x2000009
data 0x1730338
data 0x200001e
data 0x200000a
data 0x0
data 0x218
data 0xbd
data 0x200000a
data 0x208
data 0x7000a2d
data 0x200000a
data 0x70341
data 0x2
data 0x200000a
data 0x900000b
data 0x60341
data 0x4
data 0x200000a
data 0x9000007
data 0x216
data 0x1
data 0x2000009
data 0x50242
data 0x2000009
data 0x9000033
data 0x1730338
data 0x200001e
data 0x200000a
data 0x0
data 0x218
data 0xbd
data 0x200000a
data 0x70341
data 0x1
data 0x7000a2d
data 0x9000029
data 0xb10338
data 0x200001e
data 0x2
data 0x200000a
data 0xb10338
data 0x200001e
data 0x6
data 0x200000b
data 0x221
data 0x2
data 0x200000b
data 0x10341
data 0x200000b
data 0x200000a
data 0x900001a
data 0xb10338
data 0x200001e
data 0x6
data 0x200000b
data 0x221
data 0x4
data 0x200000b
data 0x50341
data 0x200000b
data 0x200000a
data 0x900000c
data 0x220
data 0x3
data 0x2000009
data 0x216
data 0x1
data 0x2000009
data 0x140
data 0x9000005
data 0x220
data 0x2
data 0x2000009
data 0x50341
data 0x3b9ac9ff
data 0x2000009
data 0x9000007
data 0x208
data 0x3b9ac9ff
data 0x2000009
data 0x49
data 0x208
data 0xffffffff
data 0x2000009
data 0x208
data 0xffffffff
data 0x200000a
data 0x49
data 0x357
data 0x200001c
data 0x11
data 0x0
data 0x148
data 0x900ff43
data 0x49
data 0x10c
data 0x200000d
data 0x208
data 0x7000d32
data 0x200001c
data 0x70341
data 0x1000000
data 0x2
data 0x3071c00
data 0x900000b
data 0x357
data 0x200001c
data 0x11
data 0x0
data 0x148
data 0x900ff32
data 0x11b
data 0x200000d
data 0x208
data 0xa
data 0x200000e
data 0x40341
data 0x5000033
data 0x200000d
data 0x900ffed
data 0x49
data 0x30a
data 0x2
data 0x2000008
data 0x900002d
data 0x148
data 0x9000007
data 0x30a
data 0x2
data 0x9000027
data 0x2000008
data 0x49
data 0xa90338
data 0x2000008
data 0x5
data 0x2000009
data 0x70341
data 0x1000000
data 0x4000
data 0x2000009
data 0x900000a
data 0x208
data 0x9
data 0x2000009
data 0x140
data 0x9000005
data 0xa70238
data 0x2000008
data 0x2000009
data 0x60341
data 0x1000000
data 0x2
data 0x3070800
data 0x900000d
data 0x20c0238
data 0x2000008
data 0xa09000e
data 0x2050338
data 0x2000008
data 0xa09001f
data 0xa09001f
data 0x49
data 0x20c0238
data 0x2000008
data 0xa090010
data 0x49
data 0x0
data 0x0
data 0x8
data 0x9
data 0xd
data 0xb
data 0xa
data 0x9
data 0xc
data 0x8
data 0xc
data 0x8
data 0x8
data 0x9
data 0xb
data 0xb
data 0x8
data 0x9
data 0xc
data 0x8
data 0xb
data 0x7
data 0x1800
data 0x1800
data 0x1000
data 0xe00
data 0x1600
data 0x1300
data 0xe00
data 0x2000
data 0x1300
data 0x1500
data 0x208
data 0x8
data 0x2000008
data 0x10341
data 0x8
data 0x2000008
data 0x9000184
data 0x40242
data 0x2000008
data 0x900fff9
data 0x2580138
data 0x2000012
data 0x208
data 0x200001e
data 0x31e1200
data 0x208
data 0x200001c
data 0x31c1200
data 0x208
data 0x2000008
data 0x31f1200
data 0x26a0238
data 0x2000012
data 0x9000004
data 0x49
data 0x148
data 0x900010f
data 0x2590238
data 0x2000012
data 0xfff25
data 0x2210538
data 0x2000012
data 0xffffffff
data 0x2000014
data 0x2000015
data 0x2000016
data 0x2250538
data 0x2000012
data 0xffffffff
data 0x500
data 0x500
data 0x500
data 0x2370838
data 0x2000012
data 0x2000012
data 0x0
data 0xfffffe00
data 0xfffffe00
data 0x0
data 0x0
data 0x0
data 0x2550638
data 0x2000012
data 0xffffffff
data 0xf
data 0x200000a
data 0x200000b
data 0x200000c
data 0x2570538
data 0x2000012
data 0xffffffff
data 0x0
data 0x2000
data 0x0
data 0x2270538
data 0x2000012
data 0xffffffff
data 0xa1f012c
data 0xa1f0135
data 0xa1f013e
data 0x24c0238
data 0x2000012
data 0xf
data 0x2ea0938
data 0x2000013
data 0x2000012
data 0xfff3e
data 0x20
data 0x40
data 0xc
data 0x200
data 0x0
data 0x37
data 0x2210538
data 0x2000013
data 0xffffffff
data 0x2000014
data 0x2000015
data 0x2000016
data 0x2250538
data 0x2000013
data 0xffffffff
data 0x400
data 0x400
data 0x400
data 0x2550638
data 0x2000013
data 0xffffffff
data 0xf
data 0x200000a
data 0x200000b
data 0x200000c
data 0x2570538
data 0x2000013
data 0xffffffff
data 0x0
data 0x2000
data 0x0
data 0x24c0238
data 0x2000013
data 0x20
data 0x2590238
data 0x2000013
data 0xfff17
data 0x2630338
data 0x2000013
data 0x2000012
data 0xffffffff
data 0x2210538
data 0x2000013
data 0xffffffff
data 0x0
data 0xfffffc00
data 0x0
data 0x2250538
data 0x2000013
data 0xffffffff
data 0x200
data 0x200
data 0x200
data 0x24c0238
data 0x2000013
data 0xf
data 0x2590238
data 0x2000013
data 0xfff18
data 0x2630338
data 0x2000013
data 0x2000012
data 0xffffffff
data 0x2210538
data 0x2000013
data 0xffffffff
data 0x0
data 0x400
data 0x0
data 0x2250538
data 0x2000013
data 0xffffffff
data 0x200
data 0x200
data 0x200
data 0x24c0238
data 0x2000013
data 0xf
data 0x2590238
data 0x2000013
data 0xfff17
data 0x2630338
data 0x2000013
data 0x2000012
data 0xffffffff
data 0x2210538
data 0x2000013
data 0xffffffff
data 0x0
data 0x0
data 0xfffffc00
data 0x2250538
data 0x2000013
data 0xffffffff
data 0x200
data 0x200
data 0x200
data 0x24c0238
data 0x2000013
data 0xf
data 0x2590238
data 0x2000013
data 0xfff18
data 0x2630338
data 0x2000013
data 0x2000012
data 0xffffffff
data 0x2210538
data 0x2000013
data 0xffffffff
data 0x0
data 0x0
data 0x400
data 0x2250538
data 0x2000013
data 0xffffffff
data 0x200
data 0x200
data 0x200
data 0x24c0238
data 0x2000013
data 0xf
data 0x208
data 0xf
data 0x2000017
data 0x102
data 0x2000017
data 0x2ea0938
data 0x2000013
data 0x2000012
data 0xfff17
data 0x4
data 0x200
data 0x2
data 0x200
data 0xc7f00
data 0x27
data 0x2210538
data 0x2000013
data 0xffffffff
data 0x200000a
data 0x200000b
data 0x200000c
data 0x2250538
data 0x2000013
data 0xffffffff
data 0x200
data 0x200
data 0x200
data 0x24c0238
data 0x2000013
data 0x14
data 0x2ea0938
data 0x2000013
data 0x2000012
data 0xfff18
data 0x4
data 0x200
data 0x2
data 0x200
data 0xc7f00
data 0x27
data 0x2210538
data 0x2000013
data 0xffffffff
data 0x200000a
data 0x200000b
data 0x200000c
data 0x2250538
data 0x2000013
data 0xffffffff
data 0x200
data 0x200
data 0x200
data 0x24c0238
data 0x2000013
data 0x14
data 0x2ea0938
data 0x2000013
data 0x2000012
data 0xfff25
data 0x10
data 0x200
data 0x2
data 0x200
data 0x1000000
data 0x40c7f00
data 0x27
data 0x2210538
data 0x2000013
data 0xffffffff
data 0x200000a
data 0x200000b
data 0x200000c
data 0x2250538
data 0x2000013
data 0xffffffff
data 0x300
data 0x300
data 0x300
data 0x2270538
data 0x2000013
data 0xffffffff
data 0xa1f0057
data 0xa1f0060
data 0xa1f0069
data 0x2290338
data 0x2000013
data 0x0
data 0x1
data 0x24c0238
data 0x2000013
data 0x14
data 0x208
data 0x14
data 0x2000017
data 0x102
data 0x2000017
data 0x50
data 0x242
data 0x200001c
data 0x900003d
data 0x208
data 0x5000023
data 0x2000017
data 0x10c
data 0x2000008
data 0x10c
data 0x200000a
data 0x10c
data 0x200000b
data 0x10c
data 0x200000c
data 0x208
data 0x7000822
data 0x2000009
data 0x810438
data 0x2000009
data 0x2000014
data 0x2000015
data 0x2000016
data 0x218
data 0x2000014
data 0x200000a
data 0x218
data 0x2000015
data 0x200000b
data 0x218
data 0x2000016
data 0x200000c
data 0x11b
data 0x2000008
data 0x40341
data 0x2000017
data 0x2000008
data 0x900ffed
data 0x221
data 0x2000017
data 0x200000a
data 0x221
data 0x2000017
data 0x200000b
data 0x221
data 0x2000017
data 0x200000c
data 0x219
data 0x600
data 0x200000b
data 0x219
data 0x200
data 0x200000b
data 0x810438
data 0x200001e
data 0x2000014
data 0x2000015
data 0x2000016
data 0x219
data 0x400
data 0x2000015
data 0x49
data 0x810438
data 0x200001c
data 0x200000a
data 0x200000b
data 0x200000c
data 0x140
data 0x900ffef
data 0xff
data 0x51
data 0x55
data 0xd8
data 0xe7
data 0xe8
data 0x10
data 0x0
data 0xf5
data 0x20
data 0xa6
data 0xc8
data 0xd4
data 0xe7
data 0xe0
data 0x10
data 0x0
data 0xff
data 0x0
data 0xe8
data 0x83
data 0x88
data 0x78
data 0x88
data 0xd8
data 0x0
data 0xd7
data 0x49
data 0xa90338
data 0x200001c
data 0x40
data 0x2000018
data 0xa90338
data 0x200001c
data 0x41
data 0x2000019
data 0x220
data 0x64
data 0x2000018
data 0x220
data 0x64
data 0x2000019
data 0x11d
data 0x2000019
data 0x10c
data 0x200001a
data 0x810438
data 0x200001c
data 0x200000e
data 0x200000f
data 0x2000010
data 0x218
data 0x200000e
data 0x2000018
data 0x218
data 0x200000f
data 0x2000019
data 0x218
data 0x2000010
data 0x200001a
data 0x49
data 0x1730338
data 0x200001c
data 0x2000008
data 0x0
data 0x208
data 0x200001e
data 0x10040880
data 0x49
data 0x40242
data 0xf00e02d
data 0x9000016
data 0xa90338
data 0x2000000
data 0x5
data 0x2000008
data 0x70341
data 0x1000000
data 0x10
data 0x2000008
data 0x900000f
data 0x1730338
data 0x2000000
data 0x2000008
data 0x0
data 0x218
data 0x81
data 0x2000008
data 0x211
data 0xf00
data 0x700082d
data 0x49
data 0x148
data 0x900fd11
data 0x10c
data 0x2000009
data 0x208
data 0x7000922
data 0x200001c
data 0x1730338
data 0x200001c
data 0x2000008
data 0x0
data 0x70341
data 0x400
data 0x10070880
data 0x9000008
data 0x357
data 0x200001c
data 0x4
data 0x0
data 0x11b
data 0x2000009
data 0x10341
data 0x2000009
data 0x5000023
data 0x900ffef
data 0x148
data 0x900fcf8
data 0x49
data 0x0
data 0x60341
data 0x4
data 0xf00f52d
data 0x900ffff
data 0x49
data 0xa90338
data 0x200001c
data 0x8
data 0x2000008
data 0x210
data 0x80
data 0x2000008
data 0x49
data 0x3560238
data 0x0
data 0x2000008
data 0x20242
data 0x2000008
data 0x9000007
data 0x208
data 0xf00682d
data 0x2000008
data 0x49
data 0x208
data 0xffffffff
data 0x2000008
data 0x49
data 0x208
data 0x1
data 0x2000011
data 0x10c
data 0x2000014
data 0x140
data 0x9000009

VAR_BUTTON_MASH_MODE:
data 0

; FORK JMP
LABEL_3:
mov 0x1, stor[17] ; source, dest
mov 0x0, stor[19] ; source, dest
mov 0x0, stor[20] ; source, dest
LABEL_4:
jmp_cmp ==, 0x0, stor[14], inl[:LABEL_9] ; operand, left, right, addr
mul 0xffffffff, stor[17] ; amount, operand
jmp_cmp ==, 0x1, stor[17], inl[:LABEL_5] ; operand, left, right, addr
call Battle::scriptRenderButtonPressHudElement, 0x24, 0x50, 0x2a, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x23, 0x4c, 0x32, 0x1, 0x80 ; type, x, y, translucency, brightness
jmp inl[:LABEL_6] ; addr
LABEL_5:
call Battle::scriptRenderButtonPressHudElement, 0x24, 0x50, 0x2e, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x21, 0x4c, 0x32, 0x1, 0x80 ; type, x, y, translucency, brightness
LABEL_6:

call Scus94491BpeSegment_8002::scriptReadRegistryEntryVar, id[lod_core:config], id[lod_core:mash_mode], 0, inl[:VAR_BUTTON_MASH_MODE]
jmp_cmp ==, 2, inl[:VAR_BUTTON_MASH_MODE], inl[:LABEL_10] ; auto, act like button is always held
jmp_cmp ==, 1, inl[:VAR_BUTTON_MASH_MODE], inl[:READ_HOLD] ; hold, jump to hold check

; otherwise, do press check
jmp_cmp &, 0x20, var[4], inl[:LABEL_10] ; operand, left, right, addr
jmp inl[:READ_HOLD_ELSE]

READ_HOLD:
jmp_cmp &, 0x20, var[3], inl[:LABEL_10] ; operand, left, right, addr

READ_HOLD_ELSE:
mov 0x0, stor[11] ; source, dest
LABEL_7:
jmp_cmp >=, 0x0, stor[20], inl[:LABEL_8] ; operand, left, right, addr
decr stor[20] ; operand
LABEL_8:
gosub inl[:LABEL_13] ; addr
LABEL_9:
yield
jmp inl[:LABEL_4] ; addr
LABEL_10:
incr stor[9] ; operand
incr stor[10] ; operand
jmp_cmp >=, 0x0, stor[20], inl[:LABEL_11] ; operand, left, right, addr
mov 0x0, stor[11] ; source, dest
jmp inl[:LABEL_12] ; addr
LABEL_11:
mov 0x1, stor[11] ; source, dest
mov stor[19], stor[20] ; source, dest
LABEL_12:
add stor[12], stor[8] ; amount, operand
jmp inl[:LABEL_7] ; addr

; SUBROUTINE
LABEL_13:
mov stor[8], stor[25] ; source, dest
mov stor[25], stor[24] ; source, dest
mod 0xa, stor[24] ; amount, operand
sub stor[24], stor[25] ; amount, operand
add 0x3, stor[24] ; amount, operand
call Battle::scriptRenderButtonPressHudElement, stor[24], 0x78, 0x32, 0x1, 0x80 ; type, x, y, translucency, brightness
mov stor[25], stor[24] ; source, dest
mod 0x64, stor[24] ; amount, operand
sub stor[24], stor[25] ; amount, operand
div 0xa, stor[24] ; amount, operand
add 0x3, stor[24] ; amount, operand
call Battle::scriptRenderButtonPressHudElement, stor[24], 0x70, 0x32, 0x1, 0x80 ; type, x, y, translucency, brightness
mov stor[25], stor[24] ; source, dest
mod 0x3e8, stor[24] ; amount, operand
div 0x64, stor[24] ; amount, operand
add 0x3, stor[24] ; amount, operand
call Battle::scriptRenderButtonPressHudElement, stor[24], 0x68, 0x32, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0xd, 0x80, 0x32, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x20, 0x68, 0x36, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x1e, 0x64, 0x36, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x1c, 0x68, 0x32, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x18, 0x64, 0x32, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x1a, 0x64, 0x3e, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x1d, 0x68, 0x3e, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x20, 0x70, 0x36, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x1d, 0x70, 0x3e, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x1c, 0x70, 0x32, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x20, 0x78, 0x36, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x1d, 0x78, 0x3e, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x1c, 0x78, 0x32, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x20, 0x80, 0x36, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x1d, 0x80, 0x3e, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x1c, 0x80, 0x32, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x1f, 0x8c, 0x36, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x19, 0x8c, 0x32, 0x1, 0x80 ; type, x, y, translucency, brightness
call Battle::scriptRenderButtonPressHudElement, 0x1b, 0x8c, 0x3e, 0x1, 0x80 ; type, x, y, translucency, brightness
return

; SUBROUTINE
LABEL_14:
gosub inl[:LABEL_23] ; addr
mov var[35], stor[26] ; source, dest
decr stor[26] ; operand
LABEL_15:
mov var[34][stor[26]], stor[27] ; source, dest
jmp_cmp ==, stor[30], stor[27], inl[:LABEL_16] ; operand, left, right, addr
decr stor[26] ; operand
jmp_cmp <=, 0x0, stor[26], inl[:LABEL_15] ; operand, left, right, addr
mov 0x1, stor[8] ; source, dest
jmp inl[:LABEL_17] ; addr
LABEL_16:
mov 0x0, stor[8] ; source, dest
LABEL_17:
return

; SUBROUTINE
LABEL_18:
gosub inl[:LABEL_23] ; addr
jmp_cmp ==, 0xffffffff, stor[28], inl[:LABEL_20] ; operand, left, right, addr
jmp_cmp ==, 0xfffffffe, stor[28], inl[:LABEL_21] ; operand, left, right, addr
mov var[35], stor[26] ; source, dest
decr stor[26] ; operand
LABEL_19:
mov var[34][stor[26]], stor[27] ; source, dest
jmp_cmp ==, stor[28], stor[27], inl[:LABEL_21] ; operand, left, right, addr
decr stor[26] ; operand
jmp_cmp <=, 0x0, stor[26], inl[:LABEL_19] ; operand, left, right, addr
LABEL_20:
mov 0x1, stor[8] ; source, dest
jmp inl[:LABEL_22] ; addr
LABEL_21:
mov 0x0, stor[8] ; source, dest
LABEL_22:
return
data 0x148
data 0x900ffda
data 0x20242
data 0x2000008
data 0x900000b
data 0x231
data 0x5000035
data 0x200001b
data 0x208
data 0x7001b34
data 0x2000008
data 0x140
data 0x9000008
data 0x231
data 0x5000033
data 0x200001b
data 0x208
data 0x7001b32
data 0x2000008
data 0x49

; SUBROUTINE
LABEL_23:
call Battle::FUN_800e74ac, stor[30], stor[28] ; bentIndex, p1
return

; SUBROUTINE
LABEL_24:
mov var[45][202], stor[8] ; source, dest
jmp_cmp <=, 0x0, stor[8], inl[:LABEL_25] ; operand, left, right, addr
mov 0x5, stor[8] ; source, dest
LABEL_25:
jmp_cmp >=, 0x9, stor[8], inl[:LABEL_26] ; operand, left, right, addr
mov 0x5, stor[8] ; source, dest
LABEL_26:
return

; SUBROUTINE
LABEL_27:
mov var[45][147], stor[8] ; source, dest
jmp_cmp <=, 0x0, stor[8], inl[:LABEL_28] ; operand, left, right, addr
mov 0x64, stor[8] ; source, dest
LABEL_28:
jmp_cmp >=, 0x3e8, stor[8], inl[:LABEL_29] ; operand, left, right, addr
mov 0x64, stor[8] ; source, dest
LABEL_29:
return
data 0x208
data 0x2000008
data 0x200000a
data 0x148
data 0x900ff9b
data 0x20242
data 0x2000008
data 0x900000f
data 0xa90338
data 0x200001c
data 0x35
data 0x200001a
data 0x70341
data 0x1000000
data 0x1
data 0x200001a
data 0x9000008
data 0x208
data 0x64
data 0x200000d
data 0x208
data 0x200000a
data 0x2000008
data 0x148
data 0x900ffc1
data 0x148
data 0x90000a4
data 0x148
data 0x900fa14
data 0x220
data 0x200000d
data 0x2000008
data 0x221
data 0x64
data 0x2000008
data 0x50341
data 0x3b9ac9ff
data 0x2000008
data 0x9000007
data 0x208
data 0x3b9ac9ff
data 0x2000008
data 0x341
data 0x1000000
data 0xffffffff
data 0x2000008
data 0x9000009
data 0x208
data 0x1000000
data 0xffffffff
data 0x2000008
data 0x357
data 0x200001c
data 0x2
data 0x2000008
data 0x49

; SUBROUTINE
LABEL_30:
gosub inl[:LABEL_42] ; addr
mov stor[8], stor[27] ; source, dest
gosub inl[:LABEL_23] ; addr
jmp_cmp ==, 0xffffffff, stor[28], inl[:LABEL_35] ; operand, left, right, addr
mov var[51], stor[26] ; source, dest
decr stor[26] ; operand
LABEL_31:
mov var[50][stor[26]], stor[28] ; source, dest
jmp_cmp &, stor[stor[stor[0], 28], 7], 0x4000, inl[:LABEL_34] ; operand, left, right, addr
mov stor[27], stor[8] ; source, dest
gosub inl[:LABEL_0] ; addr
mul stor[13], stor[8] ; amount, operand
div 0x64, stor[8] ; amount, operand
jmp_cmp >=, 0x3b9ac9ff, stor[8], inl[:LABEL_32] ; operand, left, right, addr
mov 0x3b9ac9ff, stor[8] ; source, dest
LABEL_32:
jmp_cmp <=, 0xffffffff, stor[8], inl[:LABEL_33] ; operand, left, right, addr
mov 0xffffffff, stor[8] ; source, dest
LABEL_33:
fork_reenter stor[28], 0x2, stor[8] ; index, entrypoint, stor[32] value
LABEL_34:
decr stor[26] ; operand
jmp_cmp <=, 0x0, stor[26], inl[:LABEL_31] ; operand, left, right, addr
jmp inl[:LABEL_41] ; addr
LABEL_35:
mov var[53], stor[26] ; source, dest
decr stor[26] ; operand
LABEL_36:
mov var[52][stor[26]], stor[28] ; source, dest
jmp_cmp &, stor[stor[stor[0], 28], 7], 0x4000, inl[:LABEL_40] ; operand, left, right, addr
mov stor[27], stor[8] ; source, dest
gosub inl[:LABEL_0] ; addr
mov stor[13], stor[10] ; source, dest
call Battle::scriptGetBentStat, stor[28], MONSTER_DAMAGE_REDUCTION, stor[9] ; bentIndex, statIndex, value
jmp_cmp !&, 0x1, stor[9], inl[:LABEL_37] ; operand, left, right, addr
mov 0x64, stor[13] ; source, dest
LABEL_37:
mul stor[13], stor[8] ; amount, operand
mov stor[10], stor[13] ; source, dest
div 0x64, stor[8] ; amount, operand
jmp_cmp >=, 0x3b9ac9ff, stor[8], inl[:LABEL_38] ; operand, left, right, addr
mov 0x3b9ac9ff, stor[8] ; source, dest
LABEL_38:
jmp_cmp <=, 0xffffffff, stor[8], inl[:LABEL_39] ; operand, left, right, addr
mov 0xffffffff, stor[8] ; source, dest
LABEL_39:
fork_reenter stor[28], 0x2, stor[8] ; index, entrypoint, stor[32] value
LABEL_40:
decr stor[26] ; operand
jmp_cmp <=, 0x0, stor[26], inl[:LABEL_36] ; operand, left, right, addr
LABEL_41:
gosub inl[:LABEL_23] ; addr
return

; SUBROUTINE
LABEL_42:
sub 0xc0, stor[8] ; amount, operand
return
data 0x148
data 0x900fedd
data 0x20341
data 0x1
data 0x2000008
data 0x900000a
data 0x208
data 0x1000000
data 0xfffffd80
data 0x2000008
data 0x140
data 0x9000018
data 0xa90338
data 0x200001c
data 0x41
data 0x2000008
data 0x220
data 0x64
data 0x2000008
data 0x218
data 0x1000000
data 0xffffff00
data 0x2000008
data 0x11d
data 0x2000008
data 0x50341
data 0x1000000
data 0xfffffe00
data 0x2000008
data 0x9000009
data 0x208
data 0x1000000
data 0xfffffe00
data 0x2000008
data 0x49
data 0x148
data 0x900feba
data 0x20341
data 0x1
data 0x2000008
data 0x9000009
data 0x208
data 0x0
data 0x2000008
data 0x140
data 0x900000a
data 0xa90338
data 0x200001c
data 0x40
data 0x2000008
data 0x220
data 0x1000000
data 0xffffff9c
data 0x2000008
data 0x49

; SUBROUTINE
LABEL_43:
mov 0xfffffd80, stor[8] ; source, dest
jmp inl[:LABEL_45] ; addr

; SUBROUTINE
LABEL_44:
call Battle::scriptGetBentStat, stor[28], MIDDLE_OFFSET_Y, stor[8] ; bentIndex, statIndex, value
mul 0x64, stor[8] ; amount, operand
add 0xffffff00, stor[8] ; amount, operand
neg stor[8] ; operand
jmp_cmp >=, 0xfffffe00, stor[8], inl[:LABEL_45] ; operand, left, right, addr
mov 0xfffffe00, stor[8] ; source, dest
LABEL_45:
return
data 0x208
data 0x0
data 0x2000008
data 0x140
data 0x9000009
data 0xa90338
data 0x200001c
data 0x40
data 0x2000008
data 0x220
data 0x64
data 0x2000008
data 0x49

; SUBROUTINE
LABEL_46:
call Scus94491BpeSegment::scriptLoadMonsterAttackSounds, stor[8] ; monsterIndex
LABEL_47:
call Scus94491BpeSegment::scriptGetLoadedSoundFiles, stor[26] ; flags
yield
jmp_cmp &, 0x20, stor[26], inl[:LABEL_47] ; operand, left, right, addr
return

; SUBROUTINE
LABEL_48:
decr stor[8] ; operand
call Scus94491BpeSegment::scriptStopSound, 0xa, stor[8], 0x3 ; soundFileIndex, soundIndex, mode
incr stor[8] ; operand
while stor[8], inl[:LABEL_48] ; counter, addr
call Scus94491BpeSegment::scriptUnloadSoundFile, 0x6 ; soundType
return

; SUBROUTINE
LABEL_49:
call SEffe::scriptAllocateScreenDistortionEffect, stor[stor[stor[0], 10], 22], 0x0, 0x2 ; effectIndex, angleStep, type
call SEffe::scriptAddLifespanAttachment, stor[stor[stor[0], 10], 22], 0x5 ; effectIndex, ticks
gosub inl[:LABEL_52] ; addr
mov 0x60, var[44] ; source, dest
gosub inl[:LABEL_23] ; addr
mov stor[30], var[80] ; source, dest
mov stor[28], var[81] ; source, dest
return
data 0x34b0338
data 0x3160a00
data 0x0
data 0x2
data 0x24c0238
data 0x3160a00
data 0x5
data 0x148
data 0x900002d
data 0x148
data 0x900fe46
data 0x20242
data 0x2000008
data 0x9000008
data 0x208
data 0x6a
data 0x500002c
data 0x140
data 0x9000005
data 0x208
data 0x60
data 0x500002c
data 0x148
data 0x900fe73
data 0x208
data 0x200001e
data 0x5000050
data 0x208
data 0x200001c
data 0x5000051
data 0x49

; SUBROUTINE
LABEL_50:
incr var[89] ; operand
return

; SUBROUTINE
LABEL_51:
call SEffe::scriptAllocateScreenDistortionEffect, stor[22], 0x0, 0x2 ; effectIndex, angleStep, type
call SEffe::scriptAddLifespanAttachment, stor[22], 0x5 ; effectIndex, ticks
yield
mov 0xe3, var[44] ; source, dest
yield
yield
gosub inl[:LABEL_58] ; addr
yield
yield
return

; SUBROUTINE
LABEL_52:
gosub inl[:LABEL_14] ; addr
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_55] ; operand, left, right, addr
mov var[53], stor[26] ; source, dest
decr stor[26] ; operand
LABEL_53:
mov var[52][stor[26]], stor[27] ; source, dest
call Battle::FUN_800cb618, stor[27], 0x0 ; bentIndex, set
decr stor[26] ; operand
jmp_cmp <=, 0x0, stor[26], inl[:LABEL_53] ; operand, left, right, addr
jmp_cmp !=, 0xf, var[97], inl[:LABEL_54] ; operand, left, right, addr
call Battle::scriptShowStageModelPart, 0x2 ; modelPartIndex
LABEL_54:
jmp inl[:LABEL_57] ; addr
LABEL_55:
mov var[35], stor[26] ; source, dest
decr stor[26] ; operand
LABEL_56:
mov var[34][stor[26]], stor[27] ; source, dest
call Battle::FUN_800cb618, stor[27], 0x0 ; bentIndex, set
decr stor[26] ; operand
jmp_cmp <=, 0x0, stor[26], inl[:LABEL_56] ; operand, left, right, addr
LABEL_57:
gosub inl[:LABEL_23] ; addr
return

; SUBROUTINE
LABEL_58:
gosub inl[:LABEL_14] ; addr
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_61] ; operand, left, right, addr
mov var[53], stor[26] ; source, dest
decr stor[26] ; operand
LABEL_59:
mov var[52][stor[26]], stor[27] ; source, dest
call Battle::FUN_800cb618, stor[27], 0x1 ; bentIndex, set
decr stor[26] ; operand
jmp_cmp <=, 0x0, stor[26], inl[:LABEL_59] ; operand, left, right, addr
jmp_cmp !=, 0xf, var[97], inl[:LABEL_60] ; operand, left, right, addr
call Battle::scriptHideStageModelPart, 0x2 ; modelPartIndex
LABEL_60:
jmp inl[:LABEL_63] ; addr
LABEL_61:
mov var[35], stor[26] ; source, dest
decr stor[26] ; operand
LABEL_62:
mov var[34][stor[26]], stor[27] ; source, dest
call Battle::FUN_800cb618, stor[27], 0x1 ; bentIndex, set
decr stor[26] ; operand
jmp_cmp <=, 0x0, stor[26], inl[:LABEL_62] ; operand, left, right, addr
LABEL_63:
gosub inl[:LABEL_23] ; addr
return
LABEL_64:
data 0x7
data 0x9
data 0xb
LABEL_65:
data 0xa00
data 0xfffff100
ENTRYPOINT_0:
gosub inl[:LABEL_14] ; addr
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_66] ; operand, left, right, addr
gosub inl[:LABEL_24] ; addr
mov inl[:LABEL_112[stor[8]]], stor[11] ; source, dest
mov inl[:LABEL_113[stor[8]]], stor[29] ; source, dest
mov inl[:LABEL_114[stor[8]]], stor[31] ; source, dest
gosub inl[:LABEL_27] ; addr
mov stor[8], stor[13] ; source, dest
mov 0x0, stor[14] ; source, dest
mov 0x0, stor[12] ; source, dest
jmp inl[:LABEL_67] ; addr
LABEL_66:
mov 0x0, stor[11] ; source, dest
mov 0x3, stor[29] ; source, dest
mov 0x15, stor[31] ; source, dest
mov 0x64, stor[13] ; source, dest
mov 0x1, stor[14] ; source, dest
mov 0x0, stor[12] ; source, dest
LABEL_67:
mov 0x4, var[25] ; source, dest
call Battle::scriptAllocateEmptyEffectManagerChild, stor[9] ; effectIndex
call Battle::scriptAllocateEmptyEffectManagerChild, stor[10] ; effectIndex
call Battle::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
call Battle::scriptAllocateEmptyEffectManagerChild, stor[19] ; effectIndex
call Battle::scriptAllocateEmptyEffectManagerChild, stor[20] ; effectIndex
call Battle::scriptAllocateEmptyEffectManagerChild, stor[21] ; effectIndex
mov stor[13], stor[stor[stor[0], 9], 8] ; source, dest
mov 0x0, stor[stor[stor[0], 9], 9] ; source, dest
mov 0x0, stor[stor[stor[0], 9], 11] ; source, dest
mov stor[14], stor[stor[stor[0], 9], 14] ; source, dest
mov 0xd, stor[8] ; source, dest
gosub inl[:LABEL_46] ; addr
gosub inl[:LABEL_49] ; addr
gosub inl[:LABEL_103] ; addr
mov stor[8], stor[28] ; source, dest
call Scus94491BpeSegment::scriptStartRumbleMode, 0x0, 0x1 ; joypadIndex, p1
call Scus94491BpeSegment::scriptStartRumble, 0x0, 0x32, 0x1 ; joypadIndex, p1, duration
call Battle::scriptAllocateEmptyEffectManagerChild, stor[15] ; effectIndex
mov 0x2000, stor[stor[stor[0], 15], 9] ; source, dest
mov 0x1, stor[stor[stor[0], 15], 10] ; source, dest
mov 0x1, stor[stor[stor[0], 15], 13] ; source, dest
mov 0x0, stor[stor[stor[0], 15], 15] ; source, dest
mov stor[28], stor[stor[stor[0], 15], 28] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[15], inl[:LABEL_84] ; scriptIndex, address
call Battle::scriptAllocateEmptyEffectManagerChild, stor[22] ; effectIndex
mov 0x0, stor[stor[stor[0], 22], 9] ; source, dest
call SEffe::scriptSetRelativePosition, stor[22], stor[28], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptLoadSameScriptAndJump, stor[22], inl[:LABEL_95] ; scriptIndex, address
call Scus94491BpeSegment::scriptPlaySound, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, unused1, unused2, initialDelay, repeatDelay
mov 0xf, stor[23] ; source, dest
wait stor[23] ; frames
mov 0x1, stor[stor[stor[0], 15], 15] ; source, dest
yield
yield
call SEffe::scriptLoadSameScriptAndJump, stor[9], inl[:LABEL_3] ; scriptIndex, address
LABEL_68:
mov 0x0, stor[12] ; source, dest
mov 0x2, stor[stor[stor[0], 9], 12] ; source, dest
gosub inl[:LABEL_23] ; addr
mov stor[28], stor[27] ; source, dest
add 0x2, stor[27] ; amount, operand
mov inl[:LABEL_110[stor[11]]], stor[26] ; source, dest
mov inl[:LABEL_111[stor[11]]], stor[25] ; source, dest
add inl[:LABEL_65[stor[27]]], stor[26] ; amount, operand
mov stor[stor[0], 18 + stor[11]], stor[27] ; source, dest
call SEffe::scriptSetRelativePosition, stor[27], 0xffffffff, stor[26], 0x0, stor[25] ; bobjIndex1, bobjIndex2, x, y, z
mov 0x0, stor[stor[stor[0], 27], 9] ; source, dest
mov stor[12], stor[stor[stor[0], 27], 13] ; source, dest
mov 0x0, stor[stor[stor[0], 27], 15] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[27], inl[:LABEL_99] ; scriptIndex, address
jmp_cmp !=, 0x0, stor[11], inl[:LABEL_69] ; operand, left, right, addr
call Scus94491BpeSegment::scriptPlaySound, 0xa, 0x1, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, unused1, unused2, initialDelay, repeatDelay
jmp inl[:LABEL_72] ; addr
LABEL_69:
jmp_cmp !=, 0x1, stor[11], inl[:LABEL_70] ; operand, left, right, addr
call Scus94491BpeSegment::scriptPlaySound, 0xa, 0x2, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, unused1, unused2, initialDelay, repeatDelay
jmp inl[:LABEL_72] ; addr
LABEL_70:
jmp_cmp !=, 0x2, stor[11], inl[:LABEL_71] ; operand, left, right, addr
call Scus94491BpeSegment::scriptPlaySound, 0xa, 0x2, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, unused1, unused2, initialDelay, repeatDelay
jmp inl[:LABEL_72] ; addr
LABEL_71:
call Scus94491BpeSegment::scriptPlaySound, 0xa, 0x3, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, unused1, unused2, initialDelay, repeatDelay
LABEL_72:
call Scus94491BpeSegment::scriptStartRumbleMode, 0x0, 0x2 ; joypadIndex, p1
mov stor[11], stor[25] ; source, dest
mul 0x10, stor[25] ; amount, operand
add 0x32, stor[25] ; amount, operand
call Scus94491BpeSegment::scriptStartRumble, 0x0, stor[25], 0xa ; joypadIndex, p1, duration
mov stor[31], stor[23] ; source, dest
mov 0x0, stor[24] ; source, dest
LABEL_73:
incr stor[24] ; operand
rand 0xf, stor[13] ; bound, dest
jmp_cmp !=, 0x0, stor[13], inl[:LABEL_74] ; operand, left, right, addr
LABEL_74:
rand 0x2, stor[13] ; bound, dest
jmp_cmp !=, 0x0, stor[13], inl[:LABEL_75] ; operand, left, right, addr
LABEL_75:
jmp_cmp ==, 0x0, stor[stor[stor[0], 9], 14], inl[:LABEL_77] ; operand, left, right, addr
jmp_cmp ==, 0x0, stor[stor[stor[0], 9], 11], inl[:LABEL_76] ; operand, left, right, addr
add 0x50, stor[12] ; amount, operand
mov stor[stor[0], 18 + stor[11]], stor[27] ; source, dest
mov stor[12], stor[stor[stor[0], 27], 13] ; source, dest
jmp inl[:LABEL_77] ; addr
LABEL_76:
jmp inl[:LABEL_77] ; addr
LABEL_77:
mul 0x9, stor[12] ; amount, operand
div 0xa, stor[12] ; amount, operand
yield
while stor[23], inl[:LABEL_73] ; counter, addr
mov stor[stor[0], 18 + stor[11]], stor[27] ; source, dest
mov 0x1, stor[stor[stor[0], 27], 9] ; source, dest
jmp_cmp ==, stor[29], stor[11], inl[:LABEL_79] ; operand, left, right, addr
jmp_cmp ==, 0x3, stor[11], inl[:LABEL_79] ; operand, left, right, addr
jmp_cmp ==, 0x0, stor[stor[stor[0], 9], 14], inl[:LABEL_78] ; operand, left, right, addr
jmp_cmp >, inl[:LABEL_64[stor[11]]], stor[stor[stor[0], 9], 9], inl[:LABEL_79] ; operand, left, right, addr
LABEL_78:
mov 0x0, stor[stor[stor[0], 9], 9] ; source, dest
incr stor[11] ; operand
gosub inl[:LABEL_50] ; addr
jmp inl[:LABEL_68] ; addr
LABEL_79:
mov stor[stor[stor[0], 9], 8], stor[13] ; source, dest
deallocate_other stor[9] ; index
deallocate_other stor[10] ; index
mov 0x3, var[25] ; source, dest
call Scus94491BpeSegment::scriptStartRumble, 0x0, 0x32, 0x1 ; joypadIndex, p1, duration
yield
yield
mov 0x1, stor[stor[stor[0], 18], 15] ; source, dest
yield
yield
mov 0x1, stor[stor[stor[0], 19], 15] ; source, dest
yield
yield
mov 0x1, stor[stor[stor[0], 20], 15] ; source, dest
yield
yield
mov 0x1, stor[stor[stor[0], 21], 15] ; source, dest
mov 0x2, stor[23] ; source, dest
wait stor[23] ; frames
yield
yield
yield
call Scus94491BpeSegment::scriptPlaySound, 0xa, 0x6, 0x0, 0x0, 0x0, 0x0 ; soundFileIndex, soundIndex, unused1, unused2, initialDelay, repeatDelay
mov 0x2, stor[23] ; source, dest
wait stor[23] ; frames
gosub inl[:LABEL_18] ; addr
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_81] ; operand, left, right, addr
mov var[53], stor[25] ; source, dest
decr stor[25] ; operand
LABEL_80:
mov var[52][stor[25]], stor[28] ; source, dest
gosub inl[:LABEL_44] ; addr
call SEffe::scriptAllocateElectricityEffect, stor[22], 0xffffffff, 0x200, 0x2, 0x30, 0x30, 0xf0770, 0x0 ; effectIndex, parentIndex, boltAngleRangeCutoff, boltCount, maxSegmentLength, boltAngleStep, flags, type
call SEffe::scriptSetRelativeColour, stor[22], 0xffffffff, 0x50, 0x0, 0xff ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetEffectZ, stor[22], 0xffffff00 ; effectIndex, z
call SEffe::scriptSetRelativePosition, stor[22], stor[28], 0x0, stor[8], 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[22], 0x10 ; effectIndex, ticks
mov 0x3, stor[23] ; source, dest
wait stor[23] ; frames
call Battle::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
call SEffe::scriptSetRelativePosition, stor[18], stor[28], 0x350, 0x0, 0xfffffcb0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAllocateElectricityEffect, stor[22], stor[18], 0x200, 0x2, 0x30, 0x30, 0xf0770, 0x0 ; effectIndex, parentIndex, boltAngleRangeCutoff, boltCount, maxSegmentLength, boltAngleStep, flags, type
call SEffe::scriptSetRelativeColour, stor[22], 0xffffffff, 0x50, 0x0, 0xff ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetEffectZ, stor[22], 0xffffff00 ; effectIndex, z
call SEffe::scriptSetRelativePosition, stor[22], stor[28], 0x300, 0x0, 0xfffffd00 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[22], 0x10 ; effectIndex, ticks
mov 0x3, stor[23] ; source, dest
wait stor[23] ; frames
call Battle::scriptAllocateEmptyEffectManagerChild, stor[19] ; effectIndex
call SEffe::scriptSetRelativePosition, stor[19], stor[28], 0xfffffcb0, 0x0, 0x350 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAllocateElectricityEffect, stor[22], stor[19], 0x200, 0x2, 0x30, 0x30, 0xf0770, 0x0 ; effectIndex, parentIndex, boltAngleRangeCutoff, boltCount, maxSegmentLength, boltAngleStep, flags, type
call SEffe::scriptSetRelativeColour, stor[22], 0xffffffff, 0x50, 0x0, 0xff ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetEffectZ, stor[22], 0xffffff00 ; effectIndex, z
call SEffe::scriptSetRelativePosition, stor[22], stor[28], 0xfffffd00, 0x0, 0x300 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[22], 0x10 ; effectIndex, ticks
decr stor[25] ; operand
jmp_cmp <=, 0x0, stor[25], inl[:LABEL_80] ; operand, left, right, addr
jmp inl[:LABEL_83] ; addr
LABEL_81:
mov var[51], stor[25] ; source, dest
decr stor[25] ; operand
LABEL_82:
mov var[50][stor[25]], stor[28] ; source, dest
gosub inl[:LABEL_43] ; addr
call SEffe::scriptAllocateElectricityEffect, stor[22], 0xffffffff, 0x200, 0x2, 0x30, 0x30, 0xf0770, 0x0 ; effectIndex, parentIndex, boltAngleRangeCutoff, boltCount, maxSegmentLength, boltAngleStep, flags, type
call SEffe::scriptSetRelativeColour, stor[22], 0xffffffff, 0x50, 0x0, 0xff ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetEffectZ, stor[22], 0xffffff00 ; effectIndex, z
call SEffe::scriptSetRelativePosition, stor[22], stor[28], 0x0, stor[8], 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[22], 0x10 ; effectIndex, ticks
mov 0x3, stor[23] ; source, dest
wait stor[23] ; frames
call Battle::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
call SEffe::scriptSetRelativePosition, stor[18], stor[28], 0x350, 0x0, 0xfffffcb0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAllocateElectricityEffect, stor[22], stor[18], 0x200, 0x2, 0x30, 0x30, 0xf0770, 0x0 ; effectIndex, parentIndex, boltAngleRangeCutoff, boltCount, maxSegmentLength, boltAngleStep, flags, type
call SEffe::scriptSetRelativeColour, stor[22], 0xffffffff, 0x50, 0x0, 0xff ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetEffectZ, stor[22], 0xffffff00 ; effectIndex, z
call SEffe::scriptSetRelativePosition, stor[22], stor[28], 0x300, 0x0, 0xfffffd00 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[22], 0x10 ; effectIndex, ticks
mov 0x3, stor[23] ; source, dest
wait stor[23] ; frames
call Battle::scriptAllocateEmptyEffectManagerChild, stor[19] ; effectIndex
call SEffe::scriptSetRelativePosition, stor[19], stor[28], 0xfffffcb0, 0x0, 0x350 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAllocateElectricityEffect, stor[22], stor[19], 0x200, 0x2, 0x30, 0x30, 0xf0770, 0x0 ; effectIndex, parentIndex, boltAngleRangeCutoff, boltCount, maxSegmentLength, boltAngleStep, flags, type
call SEffe::scriptSetRelativeColour, stor[22], 0xffffffff, 0x50, 0x0, 0xff ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetEffectZ, stor[22], 0xffffff00 ; effectIndex, z
call SEffe::scriptSetRelativePosition, stor[22], stor[28], 0xfffffd00, 0x0, 0x300 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[22], 0x10 ; effectIndex, ticks
decr stor[25] ; operand
jmp_cmp <=, 0x0, stor[25], inl[:LABEL_82] ; operand, left, right, addr
LABEL_83:
mov 0xcf, stor[8] ; source, dest
gosub inl[:LABEL_30] ; addr
call Scus94491BpeSegment::scriptStartRumbleMode, 0x0, 0x2 ; joypadIndex, p1
call Scus94491BpeSegment::scriptStartRumble, 0x0, 0x0, 0x14 ; joypadIndex, p1, duration
mov 0x19, stor[23] ; source, dest
wait stor[23] ; frames
mov 0x7, stor[8] ; source, dest
gosub inl[:LABEL_48] ; addr
gosub inl[:LABEL_51] ; addr
deallocate

; FORK JMP
LABEL_84:
mov stor[28], stor[29] ; source, dest
gosub inl[:LABEL_18] ; addr
mov stor[29], stor[28] ; source, dest
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_85] ; operand, left, right, addr
gosub inl[:LABEL_44] ; addr
jmp inl[:LABEL_86] ; addr
LABEL_85:
gosub inl[:LABEL_43] ; addr
LABEL_86:
call SEffe::allocateDeffTmd, stor[18], 0x2c406 ; effectIndex, flags
call SEffe::scriptSetRelativePosition, stor[18], stor[28], 0x0, stor[8], 0x0 ; bobjIndex1, bobjIndex2, x, y, z
mov 0x2000, stor[stor[stor[0], 18], 9] ; source, dest
mov 0x5, stor[stor[stor[0], 18], 10] ; source, dest
mov 0x1, stor[stor[stor[0], 18], 13] ; source, dest
call SEffe::scriptLoadSameScriptAndJump, stor[18], inl[:LABEL_88] ; scriptIndex, address
LABEL_87:
yield
mov stor[9], stor[stor[stor[0], 18], 9] ; source, dest
mov stor[10], stor[stor[stor[0], 18], 10] ; source, dest
mov stor[13], stor[stor[stor[0], 18], 13] ; source, dest
mov stor[15], stor[stor[stor[0], 18], 15] ; source, dest
mov 0x0, stor[10] ; source, dest
mov 0x0, stor[13] ; source, dest
jmp_cmp ==, 0x0, stor[15], inl[:LABEL_87] ; operand, left, right, addr
rewind

; FORK JMP
LABEL_88:
mov 0x0, stor[11] ; source, dest
mov 0x0, stor[15] ; source, dest
call SEffe::scriptSetRelativeColour, stor[0], 0xffffffff, 0x7f, 0x7f, 0x7f ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativeScale, stor[0], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[0], 0xffffffff, 0x5, 0x2000, 0x2000, 0x2000 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddRotationScalerAttachment, stor[0], 0xffffffff, 0x0, 0x0, 0x0, 0xa, 0x14, 0x1e ; effectIndex, unused, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
LABEL_89:
mov stor[9], stor[25] ; source, dest
shr 0x2, stor[25] ; shift, val
call SEffe::scriptAllocateElectricityEffect, stor[18], 0xffffffff, stor[25], 0x3, 0x700, 0x30, 0x1ff0470, 0x2 ; effectIndex, parentIndex, boltAngleRangeCutoff, boltCount, maxSegmentLength, boltAngleStep, flags, type
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, 0x50, 0x0, 0xff ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativePosition, stor[18], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddLifespanAttachment, stor[18], 0x3 ; effectIndex, ticks
jmp_cmp ==, 0x0, stor[10], inl[:LABEL_90] ; operand, left, right, addr
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[0], 0xffffffff, stor[10], stor[9], stor[9], stor[9] ; effectIndex, parentIndex, ticks, x, y, z
mov 0x0, stor[10] ; source, dest
LABEL_90:
jmp_cmp ==, 0x1, stor[13], inl[:LABEL_94] ; operand, left, right, addr
LABEL_91:
jmp_cmp ==, 0x1, stor[15], inl[:LABEL_92] ; operand, left, right, addr
yield
jmp inl[:LABEL_89] ; addr
LABEL_92:
call SEffe::scriptAddConstantColourScalerAttachment, stor[0], 0xffffffff, 0xa, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
mov 0xa, stor[23] ; source, dest
LABEL_93:
rand 0x1000, stor[25] ; bound, dest
call SEffe::scriptSetRelativeRotation, stor[0], stor[0], 0x0, 0x0, stor[25] ; bobjIndex1, bobjIndex2, x, y, z
mov stor[9], stor[25] ; source, dest
shr 0x2, stor[25] ; shift, val
call SEffe::scriptAllocateElectricityEffect, stor[18], 0xffffffff, stor[25], 0x5, 0x700, 0x30, 0x1ff0770, 0x2 ; effectIndex, parentIndex, boltAngleRangeCutoff, boltCount, maxSegmentLength, boltAngleStep, flags, type
call SEffe::scriptSetRelativePosition, stor[18], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
mov stor[23], stor[27] ; source, dest
mul 0x14, stor[27] ; amount, operand
mov stor[27], stor[13] ; source, dest
div 0x3, stor[13] ; amount, operand
call SEffe::scriptSetRelativeColour, stor[18], 0xffffffff, stor[13], 0x0, stor[27] ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddLifespanAttachment, stor[18], 0x3 ; effectIndex, ticks
yield
while stor[23], inl[:LABEL_93] ; counter, addr
deallocate
LABEL_94:
mov 0x0, stor[13] ; source, dest
mov stor[9], stor[25] ; source, dest
shr 0x1, stor[25] ; shift, val
jmp inl[:LABEL_91] ; addr

; FORK JMP
LABEL_95:
jmp_cmp !=, 0x0, stor[9], inl[:LABEL_97] ; operand, left, right, addr
mov 0x8, stor[23] ; source, dest
mov 0x600, stor[25] ; source, dest
mov 0x300, stor[26] ; source, dest
mov 0xff, stor[27] ; source, dest
LABEL_96:
mov stor[27], stor[13] ; source, dest
div 0x3, stor[13] ; amount, operand
call SEffe::scriptAllocateElectricityEffect, stor[22], 0xffffffff, stor[25], 0x5, stor[26], 0x500, 0x1ff07aa, 0x1 ; effectIndex, parentIndex, boltAngleRangeCutoff, boltCount, maxSegmentLength, boltAngleStep, flags, type
call SEffe::scriptSetRelativePosition, stor[22], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[22], 0xffffffff, stor[13], 0x0, stor[27] ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddLifespanAttachment, stor[22], 0x3 ; effectIndex, ticks
add 0x600, stor[25] ; amount, operand
sub 0x70, stor[26] ; amount, operand
sub 0x11, stor[27] ; amount, operand
yield
while stor[23], inl[:LABEL_96] ; counter, addr
yield
yield
yield
deallocate
LABEL_97:
mov 0x10, stor[23] ; source, dest
mov 0x0, stor[25] ; source, dest
mov 0xff, stor[26] ; source, dest
LABEL_98:
mov stor[26], stor[13] ; source, dest
div 0x3, stor[13] ; amount, operand
call SEffe::scriptAllocateElectricityEffect, stor[22], 0xffffffff, 0x3800, 0x5, stor[25], 0x500, 0x1ff07aa, 0x1 ; effectIndex, parentIndex, boltAngleRangeCutoff, boltCount, maxSegmentLength, boltAngleStep, flags, type
call SEffe::scriptSetRelativePosition, stor[22], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[22], 0xffffffff, stor[13], 0x0, stor[26] ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddLifespanAttachment, stor[22], 0x3 ; effectIndex, ticks
yield
add 0x40, stor[25] ; amount, operand
sub 0x11, stor[26] ; amount, operand
while stor[23], inl[:LABEL_98] ; counter, addr
yield
yield
yield
deallocate

; FORK JMP
LABEL_99:
jmp_cmp !=, 0x0, stor[9], inl[:LABEL_101] ; operand, left, right, addr
gosub inl[:LABEL_23] ; addr
mov stor[28], stor[27] ; source, dest
add 0x2, stor[27] ; amount, operand
call SEffe::allocateDeffTmd, stor[16], 0x35302 ; effectIndex, flags
rand 0x1000, stor[stor[stor[0], 16], 9] ; bound, dest
rand 0x800, stor[stor[stor[0], 16], 10] ; bound, dest
add 0x800, stor[stor[stor[0], 16], 10] ; amount, operand
sin_12 stor[stor[stor[0], 16], 9], stor[25] ; angle, dest
cos_12 stor[stor[stor[0], 16], 9], stor[26] ; angle, dest
mul stor[stor[stor[0], 16], 10], stor[25] ; amount, operand
mul stor[stor[stor[0], 16], 10], stor[26] ; amount, operand
shr 0xc, stor[25] ; shift, val
shr 0xc, stor[26] ; shift, val
call SEffe::scriptSetRelativePosition, stor[16], stor[0], stor[26], 0xffffe000, stor[25] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAllocateElectricityEffect, stor[19], stor[16], 0x1, 0x1, 0x1, 0x30, 0xb0005ff, 0x0 ; effectIndex, parentIndex, boltAngleRangeCutoff, boltCount, maxSegmentLength, boltAngleStep, flags, type
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, 0x50, 0x0, 0xff ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativePosition, stor[19], stor[0], stor[26], 0xffffe800, stor[25] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddRelativePositionScalerTicks1, stor[19], stor[0], 0x3, stor[26], 0x0, stor[25] ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x2000, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call Battle::scriptAllocateEmptyEffectManagerChild, stor[17] ; effectIndex
rand 0x1000, stor[stor[stor[0], 17], 9] ; bound, dest
rand 0x800, stor[stor[stor[0], 17], 10] ; bound, dest
add 0x800, stor[stor[stor[0], 17], 10] ; amount, operand
sin_12 stor[stor[stor[0], 17], 9], stor[25] ; angle, dest
cos_12 stor[stor[stor[0], 17], 9], stor[26] ; angle, dest
mul stor[stor[stor[0], 17], 10], stor[25] ; amount, operand
mul stor[stor[stor[0], 17], 10], stor[26] ; amount, operand
shr 0xc, stor[25] ; shift, val
shr 0xc, stor[26] ; shift, val
call SEffe::scriptSetRelativePosition, stor[17], stor[0], stor[26], 0xffffe000, stor[25] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAllocateElectricityEffect, stor[20], stor[17], 0x1, 0x1, 0x1, 0x30, 0xb0005ff, 0x0 ; effectIndex, parentIndex, boltAngleRangeCutoff, boltCount, maxSegmentLength, boltAngleStep, flags, type
call SEffe::scriptSetRelativeColour, stor[20], 0xffffffff, 0x50, 0x0, 0xff ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativePosition, stor[20], stor[0], stor[26], 0xffffe800, stor[25] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddRelativePositionScalerTicks1, stor[20], stor[0], 0x3, stor[26], 0x0, stor[25] ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptSetRelativeScale, stor[20], 0xffffffff, 0x2000, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call Battle::scriptAllocateEmptyEffectManagerChild, stor[18] ; effectIndex
rand 0x1000, stor[stor[stor[0], 18], 9] ; bound, dest
rand 0x800, stor[stor[stor[0], 18], 10] ; bound, dest
add 0x800, stor[stor[stor[0], 18], 10] ; amount, operand
sin_12 stor[stor[stor[0], 18], 9], stor[25] ; angle, dest
cos_12 stor[stor[stor[0], 18], 9], stor[26] ; angle, dest
mul stor[stor[stor[0], 18], 10], stor[25] ; amount, operand
mul stor[stor[stor[0], 18], 10], stor[26] ; amount, operand
shr 0xc, stor[25] ; shift, val
shr 0xc, stor[26] ; shift, val
call SEffe::scriptSetRelativePosition, stor[18], stor[0], stor[26], 0xffffe000, stor[25] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAllocateElectricityEffect, stor[21], stor[18], 0x1, 0x1, 0x1, 0x30, 0xb0005ff, 0x0 ; effectIndex, parentIndex, boltAngleRangeCutoff, boltCount, maxSegmentLength, boltAngleStep, flags, type
call SEffe::scriptSetRelativeColour, stor[21], 0xffffffff, 0x50, 0x0, 0xff ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativePosition, stor[21], stor[0], stor[26], 0xffffe800, stor[25] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAddRelativePositionScalerTicks1, stor[21], stor[0], 0x3, stor[26], 0x0, stor[25] ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptSetRelativeScale, stor[21], 0xffffffff, 0x2000, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
yield
yield
yield
call SEffe::allocateDeffTmd, stor[22], 0x2c404 ; effectIndex, flags
call SEffe::scriptSetRelativePosition, stor[22], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[22], 0xffffffff, 0x2000, 0x2000, 0x2000 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[22], 0xffffffff, 0x64, 0x64, 0x64 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[22], 0xffffffff, 0xc, 0x6000, 0x2000, 0x6000 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddConstantColourScalerAttachment, stor[22], 0xffffffff, 0xc, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddLifespanAttachment, stor[22], 0xd ; effectIndex, ticks
call SEffe::allocateDeffTmd, stor[stor[stor[0], 19], 9], 0x35302 ; effectIndex, flags
call SEffe::scriptSetRelativeScale, stor[stor[stor[0], 19], 9], 0xffffffff, 0x300, 0x300, 0x300 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::allocateDeffTmd, stor[stor[stor[0], 20], 9], 0x35302 ; effectIndex, flags
call SEffe::scriptSetRelativeScale, stor[stor[stor[0], 20], 9], 0xffffffff, 0x300, 0x300, 0x300 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::allocateDeffTmd, stor[stor[stor[0], 21], 9], 0x35302 ; effectIndex, flags
call SEffe::scriptSetRelativeScale, stor[stor[stor[0], 21], 9], 0xffffffff, 0x300, 0x300, 0x300 ; bobjIndex1, bobjIndex2, x, y, z
LABEL_100:
add stor[13], stor[stor[stor[0], 16], 9] ; amount, operand
mul 0x4, stor[stor[stor[0], 16], 10] ; amount, operand
div 0x5, stor[stor[stor[0], 16], 10] ; amount, operand
sin_12 stor[stor[stor[0], 16], 9], stor[25] ; angle, dest
cos_12 stor[stor[stor[0], 16], 9], stor[26] ; angle, dest
mul stor[stor[stor[0], 16], 10], stor[25] ; amount, operand
mul stor[stor[stor[0], 16], 10], stor[26] ; amount, operand
shr 0xc, stor[25] ; shift, val
shr 0xc, stor[26] ; shift, val
rand 0x100, stor[27] ; bound, dest
sub 0x80, stor[27] ; amount, operand
add stor[27], stor[25] ; amount, operand
rand 0x100, stor[27] ; bound, dest
sub 0x80, stor[27] ; amount, operand
add stor[27], stor[26] ; amount, operand
call SEffe::scriptSetRelativePosition, stor[16], stor[0], stor[26], 0xffffe000, stor[25] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativePosition, stor[19], stor[0], stor[26], 0x0, stor[25] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativePosition, stor[stor[stor[0], 19], 9], stor[0], stor[26], 0x0, stor[25] ; bobjIndex1, bobjIndex2, x, y, z
add stor[13], stor[stor[stor[0], 17], 9] ; amount, operand
mul 0x4, stor[stor[stor[0], 17], 10] ; amount, operand
div 0x5, stor[stor[stor[0], 17], 10] ; amount, operand
sin_12 stor[stor[stor[0], 17], 9], stor[25] ; angle, dest
cos_12 stor[stor[stor[0], 17], 9], stor[26] ; angle, dest
mul stor[stor[stor[0], 17], 10], stor[25] ; amount, operand
mul stor[stor[stor[0], 17], 10], stor[26] ; amount, operand
shr 0xc, stor[25] ; shift, val
shr 0xc, stor[26] ; shift, val
rand 0x100, stor[27] ; bound, dest
sub 0x80, stor[27] ; amount, operand
add stor[27], stor[25] ; amount, operand
rand 0x100, stor[27] ; bound, dest
sub 0x80, stor[27] ; amount, operand
add stor[27], stor[26] ; amount, operand
call SEffe::scriptSetRelativePosition, stor[17], stor[0], stor[26], 0xffffe000, stor[25] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativePosition, stor[20], stor[0], stor[26], 0x0, stor[25] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativePosition, stor[stor[stor[0], 20], 9], stor[0], stor[26], 0x0, stor[25] ; bobjIndex1, bobjIndex2, x, y, z
add stor[13], stor[stor[stor[0], 18], 9] ; amount, operand
mul 0x4, stor[stor[stor[0], 18], 10] ; amount, operand
div 0x5, stor[stor[stor[0], 18], 10] ; amount, operand
sin_12 stor[stor[stor[0], 18], 9], stor[25] ; angle, dest
cos_12 stor[stor[stor[0], 18], 9], stor[26] ; angle, dest
mul stor[stor[stor[0], 18], 10], stor[25] ; amount, operand
mul stor[stor[stor[0], 18], 10], stor[26] ; amount, operand
shr 0xc, stor[25] ; shift, val
shr 0xc, stor[26] ; shift, val
rand 0x100, stor[27] ; bound, dest
sub 0x80, stor[27] ; amount, operand
add stor[27], stor[25] ; amount, operand
rand 0x100, stor[27] ; bound, dest
sub 0x80, stor[27] ; amount, operand
add stor[27], stor[26] ; amount, operand
call SEffe::scriptSetRelativePosition, stor[18], stor[0], stor[26], 0xffffe000, stor[25] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativePosition, stor[21], stor[0], stor[26], 0x0, stor[25] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativePosition, stor[stor[stor[0], 21], 9], stor[0], stor[26], 0x0, stor[25] ; bobjIndex1, bobjIndex2, x, y, z
yield
jmp_cmp ==, 0x0, stor[9], inl[:LABEL_100] ; operand, left, right, addr
mov 0x0, stor[15] ; source, dest
deallocate_other stor[stor[stor[0], 19], 9] ; index
deallocate_other stor[stor[stor[0], 20], 9] ; index
deallocate_other stor[stor[stor[0], 21], 9] ; index
deallocate_other stor[16] ; index
deallocate_other stor[17] ; index
deallocate_other stor[18] ; index
deallocate_other stor[19] ; index
deallocate_other stor[20] ; index
deallocate_other stor[21] ; index
yield
LABEL_101:
call Battle::scriptAllocateEmptyEffectManagerChild, stor[16] ; effectIndex
call SEffe::scriptSetRelativePosition, stor[16], stor[0], 0x0, 0xffffe000, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptAllocateElectricityEffect, stor[19], stor[16], 0x1, 0x1, 0x1, 0x30, 0xb0008ff, 0x0 ; effectIndex, parentIndex, boltAngleRangeCutoff, boltCount, maxSegmentLength, boltAngleStep, flags, type
call SEffe::scriptSetRelativeColour, stor[19], 0xffffffff, 0x50, 0x0, 0xff ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptSetRelativePosition, stor[19], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[19], 0xffffffff, 0x6000, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::allocateDeffTmd, stor[17], 0x35302 ; effectIndex, flags
call SEffe::scriptSetRelativePosition, stor[17], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeScale, stor[17], 0xffffffff, 0xa00, 0x0, 0xa00 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativeColour, stor[17], 0xffffffff, 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, r, g, b
call SEffe::scriptAddConstantColourScalerAttachment, stor[17], 0xffffffff, 0x14, 0x80, 0x80, 0x80 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddScaleScalerMultiplicativeAttachmentTicks, stor[17], 0xffffffff, 0x14, 0xa00, 0xc00, 0xa00 ; effectIndex, parentIndex, ticks, x, y, z
call SEffe::scriptAddRotationScalerAttachment, stor[17], 0xffffffff, 0x0, 0x234, 0x0, 0x0, 0x0, 0x0 ; effectIndex, unused, velocityX, velocityY, velocityZ, accelerationX, accelerationY, accelerationZ
LABEL_102:
rand 0x300, stor[25] ; bound, dest
rand 0x300, stor[26] ; bound, dest
sub 0x180, stor[25] ; amount, operand
sub 0x180, stor[26] ; amount, operand
call SEffe::scriptSetRelativePosition, stor[19], stor[0], stor[25], 0x0, stor[26] ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptSetRelativePosition, stor[17], stor[0], stor[25], 0x0, stor[26] ; bobjIndex1, bobjIndex2, x, y, z
yield
jmp_cmp ==, 0x0, stor[15], inl[:LABEL_102] ; operand, left, right, addr
call Battle::scriptAllocateEmptyEffectManagerChild, stor[22] ; effectIndex
mov 0x1, stor[stor[stor[0], 22], 9] ; source, dest
call SEffe::scriptSetRelativePosition, stor[22], stor[0], 0x0, 0x0, 0x0 ; bobjIndex1, bobjIndex2, x, y, z
call SEffe::scriptLoadSameScriptAndJump, stor[22], inl[:LABEL_95] ; scriptIndex, address
call SEffe::scriptAddConstantColourScalerAttachment, stor[17], 0xffffffff, 0x5, 0x0, 0x0, 0x0 ; effectIndex, parentIndex, ticks, destR, destG, destB
call SEffe::scriptAddLifespanAttachment, stor[17], 0x5 ; effectIndex, ticks
deallocate_other stor[16] ; index
deallocate_other stor[19] ; index
rewind
data 0x2370838
data 0x2000000
data 0x1000000
data 0xffffffff
data 0x0
data 0x234
data 0x0
data 0x0
data 0x0
data 0x0
data 0x2210538
data 0x2000000
data 0x2000009
data 0x0
data 0x0
data 0x0
data 0x0
data 0x140
data 0x900fff9

; SUBROUTINE
LABEL_103:
mov 0xffff, stor[stor[stor[0], 10], 12] ; source, dest
gosub inl[:LABEL_18] ; addr
jmp_cmp ==, 0x0, stor[8], inl[:LABEL_106] ; operand, left, right, addr
mov var[53], stor[stor[stor[0], 10], 9] ; source, dest
decr stor[stor[stor[0], 10], 9] ; operand
LABEL_104:
mov stor[stor[stor[0], 10], 9], stor[25] ; source, dest
mov var[52][stor[25]], stor[stor[stor[0], 10], 28] ; source, dest
call Battle::scriptGetBentPos, stor[stor[stor[0], 10], 28], stor[25], stor[26], stor[27] ; bentIndex, x, y, z
abs stor[27] ; operand
jmp_cmp <=, stor[stor[stor[0], 10], 12], stor[27], inl[:LABEL_105] ; operand, left, right, addr
mov stor[27], stor[stor[stor[0], 10], 12] ; source, dest
mov stor[stor[stor[0], 10], 28], stor[stor[stor[0], 10], 13] ; source, dest
LABEL_105:
decr stor[stor[stor[0], 10], 9] ; operand
jmp_cmp <=, 0x0, stor[stor[stor[0], 10], 9], inl[:LABEL_104] ; operand, left, right, addr
jmp inl[:LABEL_109] ; addr
LABEL_106:
mov var[51], stor[stor[stor[0], 10], 9] ; source, dest
decr stor[stor[stor[0], 10], 9] ; operand
LABEL_107:
mov stor[stor[stor[0], 10], 9], stor[25] ; source, dest
mov var[50][stor[25]], stor[stor[stor[0], 10], 28] ; source, dest
call Battle::scriptGetBentPos, stor[stor[stor[0], 10], 28], stor[25], stor[26], stor[27] ; bentIndex, x, y, z
abs stor[27] ; operand
jmp_cmp <=, stor[stor[stor[0], 10], 12], stor[27], inl[:LABEL_108] ; operand, left, right, addr
mov stor[27], stor[stor[stor[0], 10], 12] ; source, dest
mov stor[stor[stor[0], 10], 28], stor[stor[stor[0], 10], 13] ; source, dest
LABEL_108:
decr stor[stor[stor[0], 10], 9] ; operand
jmp_cmp <=, 0x0, stor[stor[stor[0], 10], 9], inl[:LABEL_107] ; operand, left, right, addr
LABEL_109:
mov stor[stor[stor[0], 10], 13], stor[8] ; source, dest
return
LABEL_110:
data 0x400
data 0xfffffc00
data 0x200
data 0xfffffe00
LABEL_111:
data 0x400
data 0xfffffc00
data 0xfffff400
data 0xc00
LABEL_112:
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
data 0x0
LABEL_113:
data 0x1
data 0x1
data 0x2
data 0x3
data 0x3
data 0x3
data 0x3
data 0x3
data 0x3
data 0x3
LABEL_114:
data 0x15
data 0x15
data 0x15
data 0x15
data 0x15
data 0x15
data 0x15
data 0x15
data 0x15
data 0x15
